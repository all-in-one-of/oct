
global proc string x_bakeShape(int $start,int $end,int $step,string $baseObjName ,int $autoKeyBakeVis,int $autoKeyOriVis)
{
	undoInfo -state off;



	//初始化节点名称，变量名。
	string $currentObj;
	int $j=0;								//$j为blendshape权重步进计数器。
	float $stepWeight=0.001*$step;			//每次进行blendshape deform时的重量累加器。
	float $weight=0.0;						//初始重量为0。
		
	string $blendNode=$baseObjName+"_blendShape";
	string $blendNodeName[];
	string $endObjName="bake_weight";

	string $oldSelect[]=`ls -sl`;
	
	string $selects[]=`listRelatives -s -ni $oldSelect`;
	string $surfaces[]={""};
	int $i=0;

	//get the surface to blendshape.
	for ($sel in $selects) 
		{
		if ((`nodeType $sel`=="nurbsSurface") || (`nodeType $sel`=="mesh")||( `nodeType $sel`=="nurbsCurve")||( `nodeType $sel`=="lattice") )
			{
			$surfaces[$i]=$sel;
			$i++;
			}
		}

	//creat group named "fx"
	string $group=($baseObjName+"_bakeshape_gp");
	if (!`objExists $group`) $group=`createNode  transform -n ($baseObjName+"_bakeshape_gp")` ;
	else error "scenes already have the same name objects";	
	//开始进行物体bake.

	for ($i=0;$i<=($end-$start);$i++)
		{
		
		//逐帧向前播放。
		currentTime ($i+$start);
		//
		//只有到了正确帧时，才会进行操作。
		if ($i%$step==0) 
		{
			int $k=1;						//$k 为同一时间内物体的编号计数器。
			//
			$weight=$j*$stepWeight;
			//
			//在同一时间内，循环各个物体。
			for ($sel in $surfaces)		
			{
				$baseObj=$baseObjName+$k;
				string $dupObj[]=`duplicate -rr -n $baseObj $sel `;

				//parent to world space.
				string $parent[]=`listRelatives -p $dupObj[0]`;
				if ($parent[0]!="")	
				{
					if (`getAttr -l ($dupObj[0]+".tx")`) setAttr -l 0 ($dupObj[0]+".tx");
					if (`getAttr -l ($dupObj[0]+".ty")`) setAttr -l 0 ($dupObj[0]+".ty");
					if (`getAttr -l ($dupObj[0]+".tz")`) setAttr -l 0 ($dupObj[0]+".tz");
					if (`getAttr -l ($dupObj[0]+".rx")`) setAttr -l 0 ($dupObj[0]+".rx");
					if (`getAttr -l ($dupObj[0]+".ry")`) setAttr -l 0 ($dupObj[0]+".ry");
					if (`getAttr -l ($dupObj[0]+".rz")`) setAttr -l 0 ($dupObj[0]+".rz");
					if (`getAttr -l ($dupObj[0]+".sx")`) setAttr -l 0 ($dupObj[0]+".sx");
					if (`getAttr -l ($dupObj[0]+".sy")`) setAttr -l 0 ($dupObj[0]+".sy");
					if (`getAttr -l ($dupObj[0]+".sz")`) setAttr -l 0 ($dupObj[0]+".sz");

					parent -w $dupObj[0];
				}
	
				//if have more than one child node ,delete it.
				string $fullObj[]=`listRelatives -s -f $dupObj[0]`;
				string $intermediaObjs[]=`ls -io $fullObj`;
				delete $intermediaObjs;

					
				//get parent obj;
				string $shape[]=`listRelatives -s -f $dupObj[0]`;

				//重命名shape节点，防止出现因源物体transform节点与shape节点命名不统一造成的名字冲突。
				rename $shape[0] ($baseObj+"Shape");
				//
				//如果是开始帧，先建立blendShape deform　节点。否则是向节点添加目标体，累加重量。
				if ($i==0) 
					{
					rename $dupObj[0] $baseObj;
					//duplicate the start time object,creat blendShape node.
					$dupObj=`duplicate -rr $baseObj`;
					rename $dupObj[0] $endObjName;
					$blendNodeName=`blendShape -n $blendNode -origin world -ib -w $weight 1 $endObjName $baseObj`;
					rename $blendNodeName[0] ($blendNode+$k);
					delete $endObjName;
					}
				else 
					{
					$currentObj=$dupObj[0];
					blendShape -e -ib -t $baseObj 0 $currentObj $weight $baseObj;
					delete $currentObj;
					}
				$k++;	//物体计数器累加1
				}
				$j++;
			}		
		}
	$k=1;

	//add keyframe.
	for ($sel in $surfaces)
	{		
		setKeyframe -at $endObjName -v 0.0 -t $start -itt "linear" -ott "linear" ($blendNode+$k);		
		setKeyframe -at $endObjName -v $weight -t $end -itt "linear" -ott "linear" ($blendNode+$k);
		parent ($baseObjName+$k) $group;
		$k++;
	}
	undoInfo -state on;
	//key group visibility
	if($autoKeyBakeVis)
	{
		setKeyframe -at "visibility" -v 0 -t ($start-1) $group;
		setKeyframe -at "visibility" -v 1 -t ($start) $group;
		setKeyframe -at "visibility" -v 1 -t ($end) $group;
		setKeyframe -at "visibility" -v 0 -t ($end+1) $group;
	}
	if ($autoKeyOriVis)
	{	
		for ($sel in $surfaces)	
		{
			//string $parentNode[]=`listRelatives -p $selG[0]`;
			string $selG[]=`listRelatives -p  $sel`;
			//print $selG[0];print ("\n");
		//	setKeyframe -v 1 -t ($start-1) ($selG[0]+".visibility");
			setKeyframe -v 0 -t ($start) ($selG[0]+".visibility");
			setKeyframe -v 0 -t ($end) ($selG[0]+".visibility");
			setKeyframe -v 1 -t ($end+1) ($selG[0]+".visibility");
		}
	}
	select -r $oldSelect;
	return $group;
}
//
//函数:topoint3  
//作用：转换成小数点后三位的精度。(目前用不上）。
global proc float topoint3(float $value)
{
	int $zheng,$a,$b,$c,$d;
	float $p1,$p2,$p3,$p4;
	float $result;

	$p1=$value%1;
	$p2=$value%0.1;
	$p3=$value%0.01;
	$p4=$value%0.001;

	$zheng=$value;
	$a=$p1*10;
	$b=$p2*100;
	$c=$p3*1000;
	$d=$p4*10000;
	if ($d>4) $c++;

	$result=$zheng+($a*1.0)/10+($b*1.0)/100+($c*1.0)/1000;
	return $result;
}



global proc x_bakeShapeWindow()
{
	string $cmd="int $start=`intFieldGrp -q -v1 startFrameField`;"+
		"int $end=`intFieldGrp -q -v1 endFrameField`;"+
		"int $step=`intFieldGrp -q -v1 stepField`;"+
		"string $name=`textFieldGrp -q -tx objNameField`;"+
		"int $autokey=`checkBox	-q -v ifAutoKeyVisBake_check`;"+
		"int $autoKeyOri=`checkBox	-q -v ifAutoKeyVisOri_check`;"+
		"x_bakeShape($start,$end,$step,$name,$autokey,$autoKeyOri);";
	if (`window -ex bakeShape_window`) deleteUI bakeShape_window;
	window -t "bake animation objects" -in "bake animation objects" -w 300 -h 200 -rtf 1 bakeShape_window;
	//define uiTemplate
	if (!`uiTemplate -exists XUITemplate`) uiTemplate XUITemplate;
		columnLayout -dt XUITemplate -adj 1 -rs 2;
		intFieldGrp -dt XUITemplate  -cw 1 110;
		button -dt XUITemplate -al "center";
	setUITemplate -pushTemplate XUITemplate ;
	//create party
	string $mainFormL="bakeSahpeUIForm";
	formLayout $mainFormL;
		string $col=`columnLayout -rs 3 -cal "center"`;
			intFieldGrp -l "start frame" -nf 1 -v1	`playbackOptions -q -min`   startFrameField;
			intFieldGrp -l "end frame" -nf 1 -v1  `playbackOptions -q -max`  endFrameField;
			intFieldGrp -l "step frame" -nf 1 -v1 1   stepField;
			textFieldGrp -label "name of objects" -cw 1 110 -cw 2 150	-text  "" objNameField;
		setParent $mainFormL;
			checkBox	-label "Auto key visibility of baked medel"	-al "left" ifAutoKeyVisBake_check;
			checkBox	-label "Auto key visibility of origin model"	-al "left" ifAutoKeyVisOri_check;
		setParent $mainFormL;
				string $startBtn=`button -w 100 -l "go !!!" -c $cmd`;
				string $closeBtn=`button -w 100 -l "close" -c "deleteUI bakeShape_window"`;


	//edit party
	formLayout -e	
		-af  $col   "top"	0
		-af  $col   "left"	0
		-af  $col   "right"	0	

		-ac  ifAutoKeyVisBake_check   "top"	0 $col
		-af  ifAutoKeyVisBake_check   "left"	110
		-af  ifAutoKeyVisBake_check   "right"	0	

		-ac  ifAutoKeyVisOri_check   "top"	0 ifAutoKeyVisBake_check
		-af  ifAutoKeyVisOri_check   "left"	110
		-af  ifAutoKeyVisOri_check   "right"	0	
//		-ac  ifAutoKeyVisOri_check  "bottom" 5	$startBtn

		-af $startBtn    "left"	3
		-ap $startBtn    "right"	5 50	
		-af $startBtn	  "bottom" 3	


		-ac  $closeBtn   "left"	3 $startBtn
		-af  $closeBtn   "right"	3	
		-af	$closeBtn  "bottom" 3	

	$mainFormL;

	setUITemplate -popTemplate;
		showWindow bakeShape_window;
}

