// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Feb 7 2013
//
//  Description:
//      This script is called from TmayaApp::initAfter() for HUD initialization.
//
{
	source initHUDScripts.mel;

	// Object Details

	headsUpDisplay -s 4
		-b 0
		-vis (`optionVar -q objectDetailsVisibility`)
		-label  (uiRes("m_initHUD.kHUDTitleBackfaces"))
		-lw 135
		-dw 75
		-c "objectDetailsBackfaces()"
		-ev "SelectionChanged"
		-nc "attributeChange"
		HUDObjDetBackfaces;

	headsUpDisplay -s 4
		-b 1
		-vis (`optionVar -q objectDetailsVisibility`)
		-label  (uiRes("m_initHUD.kHUDTitleSmoothness"))
		-lw 135
		-dw 75
		-c "objectDetailsSmoothness()"
		-ev "SelectionChanged"
		-nc "attributeChange"
		HUDObjDetSmoothness;

	headsUpDisplay -s 4
		-b 2
		-vis (`optionVar -q objectDetailsVisibility`)
		-label (uiRes("m_initHUD.kHUDTitleInstance"))
		-lw 135
		-dw 75
		-c "objectDetailsInstance()"
		-ev "SelectionChanged"
		-nc "instanceChange"
		HUDObjDetInstance;

	headsUpDisplay -s 4
		-b 3
		-vis (`optionVar -q objectDetailsVisibility`)
		-label (uiRes("m_initHUD.kHUDTitleDisplayLayer"))
		-lw 135
		-dw 75
		-c "objectDetailsDisplayLayer()"
		-ev "SelectionChanged"
		-nc "connectionChange"
		HUDObjDetDispLayer;

	headsUpDisplay -s 4
		-b 4
		-vis (`optionVar -q objectDetailsVisibility`)
		-label (uiRes("m_initHUD.kHUDTitleDistanceFromCamera"))
		-lw 135
		-dw 75
		-pre "distanceFromCamera"
		HUDObjDetDistFromCam;

	headsUpDisplay -s 4
		-b 5
		-vis (`optionVar -q objectDetailsVisibility`)
		-label (uiRes("m_initHUD.kHUDTitleSelectedObjects"))
		-lw 135
		-dw 75
		-c "objectDetailsNumberOfSelectedObjects()"
		-ev "SelectionChanged"
		HUDObjDetNumSelObjs;

	// Poly Count

	headsUpDisplay -s 0
		-b 0
		-vis (`optionVar -q polyCountVisibility`)
		-label (uiRes("m_initHUD.kHUDTitleVerts"))
		-lw 50
		-dw 65
		-da "right"
		-pre "polyVerts"
		HUDPolyCountVerts;

	headsUpDisplay -s 0
		-b 1
		-vis (`optionVar -q polyCountVisibility`)
		 -label (uiRes("m_initHUD.kHUDTitleEdges"))
		-lw 50
		-dw 65
		-da "right"
		-pre "polyEdges"
		HUDPolyCountEdges;

	headsUpDisplay -s 0
		-b 2
		-vis (`optionVar -q polyCountVisibility`)
		-label (uiRes("m_initHUD.kHUDTitleFaces"))
		-lw 50
		-dw 65
		-da "right"
		-pre "polyFaces"
		HUDPolyCountFaces;

	headsUpDisplay -s 0
		-b 3
		-vis (`optionVar -q polyCountVisibility`)
		 -label (uiRes("m_initHUD.kHUDTitleTris"))
		-lw 50
		-dw 65
		-da "right"
		-pre "polyTriangles"
		HUDPolyCountTriangles;

	headsUpDisplay -s 0
		-b 4
		-vis (`optionVar -q polyCountVisibility`)
		 -label (uiRes("m_initHUD.kHUDTitleUVs"))
		-lw 50
		-dw 65
		-da "right"
		-pre "polyUVs"
		HUDPolyCountUVs;

	// Subd details

	headsUpDisplay -s 0
		-b 5
		-vis (`optionVar -q subdDetailsVisibility`)
		-label (uiRes("m_initHUD.kHUDTitleSubdivCurrentLevel"))
		-lw 135
		-dw 30
		-c "subdDetailsCurrentLevel()"
		-ev "SelectionChanged"
		-nc "attributeChange"
		HUDSubdLevel;

	headsUpDisplay -s 0
		-b 6
		-vis (`optionVar -q subdDetailsVisibility`)
		-label (uiRes("m_initHUD.kHUDTitleSubdivMode"))
		-lw 135
		-dw 30
		-c "subdDetailsCurrentMode()"
		-ev "SelectionChanged"
		HUDSubdMode;

	headsUpDisplay -s 0
		-b 7
		-vis (`optionVar -q particleCountVisibility`)
		-label (uiRes("m_initHUD.kHUDTitleParticleCount"))
		-lw 50
		-dw 130
		-da "right"
		-c "getParticleCount()"
		-atr
		HUDParticleCount;

	// exclude getParticleCount from command history since it is called on each refresh
	if (!stringArrayContains("getParticleCount", `commandEcho -q -filter`)) {
		commandEcho -addFilter "getParticleCount";
	}

	// Camera Names
	headsUpDisplay -s 7
		-b 0
		-vis (`optionVar -q cameraNamesVisibility`)
		-ao true
		-ba center
		-pre "cameraNames"
		HUDCameraNames;

	// This HUD is used to display the string.
	// Its visibility is toggled in toggleHWRendererModelPanel()
	// and the setViewportRendererVisibility().
	headsUpDisplay -s 2
		-b 1
		-vis (`optionVar -q viewportRendererVisibility`)
		-ba center
		-label (uiRes("m_initHUD.kHUDTitleCameraName"))
		-pre "viewportRenderer"
		HUDViewportRenderer;

	headsUpDisplay -s 2
		-b 3
		-vis (`optionVar -q capsLockVisibility`)
		-ba center
		-c "getCapsLockState()"
		-atr
		HUDCapsLock;

	// exclude getCapsLockState from command history since it is called on each refresh
	if (!stringArrayContains("getCapsLockState", `commandEcho -q -filter`)) {
		commandEcho -addFilter "getCapsLockState";
	}

	int $section = 9;
	int $lblWidth = 115;
	int $block = 0;


	if(`about -ev`)
	{
		$section = 3;
		$lblWidth = 135;
	}

	// Frame Rate
	headsUpDisplay -s $section
		-b $block
		-vis (`optionVar -q frameRateVisibility`)
		-ba right
		-dfs large
		-da right
		-dp 1
		-pre "frameRate"
		HUDFrameRate;
	$block++;

	// GPU Override
	headsUpDisplay
		-section $section
		-labelWidth $lblWidth
		-dataWidth 95
		-b $block
		-vis (`optionVar -q evaluationVisibility`)
		-label (uiRes("m_initHUD.kHUDLabelOpenCLOverride"))
		-labelFontSize small
		-pre "gpuOverride"
		HUDGPUOverride;
	$block++;

	// EM State
	headsUpDisplay
		-section $section
		-labelWidth $lblWidth
		-dataWidth 95
		-b $block
		-vis (`optionVar -q evaluationVisibility`)
		-label (uiRes("m_initHUD.kHUDLabelEMState"))
		-labelFontSize small
		-pre "emState"
		HUDEMState;
	$block++;

	// Evaluation
	headsUpDisplay
		-section $section
		-labelWidth $lblWidth
		-dataWidth 95
		-b $block
		-vis (`optionVar -q evaluationVisibility`)
		-label (uiRes("m_initHUD.kHUDLabelEvaluation"))
		-labelFontSize small
		-pre "evaluation"
		HUDEvaluation;
	$block++;

	int $mldVisibility = `optionVar -q materialLoadingDetailsVisibility`;
	headsUpDisplay -s $section
		-b $block
		-label (uiRes("m_initHUD.kHUDLoadingTextures"))
		-dp 1
		-dfs "small"
		-lw $lblWidth
		-dw 75
		-pre "textureLoadingCount"
		-vis $mldVisibility
		HUDLoadingTextures;
	$block++;

	headsUpDisplay -s $section
		-b $block
		-label (uiRes("m_initHUD.kHUDLoadingMaterials"))
		-dp 1
		-dfs "small"
		-lw $lblWidth
		-dw 75
		-pre "materialLoadingCount"
		-vis $mldVisibility
		HUDLoadingMaterials;
	$block++;

	// Register warning message.
	scriptJob -e "serialExecutorFallback" "WarnAboutSerialExecutionFallback;";

	// Current Frame
	headsUpDisplay -section $section
		-block				$block
		-blockSize			"small"
		-label				(uiRes("m_initHUD.kHUDCurrentFrameLabel"))
		-labelWidth			$lblWidth
		-dataWidth			75
		-labelFontSize		"small"
		-dataFontSize		"small"
		-allowOverlap		true
		-preset				"currentFrame"
		-vis				(`optionVar -q currentFrameVisibility`)
		HUDCurrentFrame;
	$block++;

	// Animation Stuff

	headsUpDisplay -s $section
		-b $block
		-label (uiRes("m_initHUD.kHUDTitleIKBlend"))
		-dp 1
		-dfs "small"
		-lw $lblWidth
		-dw 75
		-c "animationDetailsIKFK()"
		-ev "SelectionChanged"
		-nc "attributeChange"
		HUDIKSolverState;
	$block++;

	headsUpDisplay -s $section
		-b $block
		-label (uiRes("m_initHUD.kHUDTitleCurrentCharacter"))
		-dp 1
		-dfs "small"
		-lw $lblWidth
		-dw 75
		-c "animationDetailsCurrentCharacter()"
		-ev "NewSceneOpened"
		HUDCurrentCharacter;
	$block++;

	headsUpDisplay -s $section
		-b $block
		-label (uiRes("m_initHUD.kHUDTitlePlaybackSpeed"))
		-dp 1
		-dfs "small"
		-lw $lblWidth
		-dw 75
		-c "animationDetailsPlaybackSpeed()"
		-ev "timeUnitChanged"
		HUDPlaybackSpeed;
	$block++;

	headsUpDisplay -s $section
		-b $block
		-label (uiRes("m_initHUD.kHUDHikKeyingMode"))
		-dp 1
		-dfs "small"
		-lw $lblWidth
		-dw 75
		-c "hikDetailsKeyingMode()"
		-ev "SelectionChanged"
		HUDHikKeyingMode;
	$block++;

	headsUpDisplay -s $section
		-b $block
		-label (uiRes("m_initHUD.kHUDFbikKeyType"))
		-dp 1
		-dfs "small"
		-lw $lblWidth
		-dw 75
		-c "fbikDetailsKeyType()"
		-ev "SelectionChanged"
		HUDFbikKeyType;
	$block++;

	headsUpDisplay -section $section
		-block $block
		-vis (`optionVar -q selectDetailsVisibility`)
		-lw $lblWidth
		-preset "softSelect"
		HUDSoftSelectState;
	$block++;

	headsUpDisplay -section $section
		-block $block
		-vis (`optionVar -q selectDetailsVisibility`)
		-preset "reflection"
		-lw $lblWidth
		HUDReflectionState;
	$block++;

	// Current container
	headsUpDisplay -section $section
		-block				$block
		-blockSize			"small"
		-label				(uiRes("m_initHUD.kHUDCurrentContainerLabel"))
		-labelWidth			$lblWidth
//		-dataWidth			75
		-labelFontSize		"small"
		-dataFontSize		"small"
		-command			"getCurrentContainer"
		-event				"currentContainerChange"
		-vis (`optionVar -q currentContainerVisibility`)
		HUDCurrentContainer;
	$block++;

	// None of the above animation HUDs had their visibility
	// set according to the option var.  Do that now...
	//
	setAnimationDetailsVisibility(`optionVar -q animationDetailsVisibility`);
	setFbikDetailsVisibility(`optionVar -q fbikDetailsVisibility`);
	setHikDetailsVisibility(`optionVar -q hikDetailsVisibility`);

	headsUpDisplay -section $section
		-block $block
		-vis (`optionVar -q focalLengthVisibility`)
		-preset "focalLength"
		-lw $lblWidth
		HUDFocalLength;
	$block++;

	// Scene Timecode
	headsUpDisplay -section $section
		-block				$block
		-blockSize			"small"
		-label				(uiRes("m_initHUD.kHUDSceneTimecodeLabel"))
		-labelWidth			$lblWidth
		-dataWidth			75
		-labelFontSize		"small"
		-dataFontSize		"small"
		-allowOverlap		true
		-preset				"sceneTimecode"
		-vis (`optionVar -q sceneTimecodeVisibility`)
		HUDSceneTimecode;
	$block++;

	// View Axis
	headsUpDisplay -s 5
		-b 0
		-vis (`optionVar -q viewAxisVisibility`)
		-pre "viewAxis"
		HUDViewAxis;

//OCTV MODIFY
	headsUpDisplay -section $section
			-label "User Name:"
			-block $block
			-dfs large
			-vis (`optionVar -q userNameVisibility`)
			-lw $lblWidth
			-command "octvGetUserName()"
			-event "SelectionChanged"
			HUDUserName;
	$block++;
	headsUpDisplay -section $section
			-label "File Name:"
			-block $block
			-dfs large
			-vis (`optionVar -q fileNameVisibility`)
			-lw $lblWidth
			-command "octvGetFileName()"
			-event "SelectionChanged"
			HUDFileName;
	$block++;
	headsUpDisplay -section $section
			-label "CamAccSpeed:"
			-block $block
			-dfs large
			-vis (`optionVar -q CamSpeedVisibility`)
			-lw $lblWidth
			-command "octvGetCamAccSpeed()"
			-event "timeChanged"
			HUDCamAccSpeed;
	$block++;
	headsUpDisplay -section $section
			-label "CamSpeed:"
			-block $block
			-dfs large
			-vis (`optionVar -q CamSpeedVisibility`)
			-lw $lblWidth
			-command "octvGetCamSpeed()"
			-event "timeChanged"
			HUDCamSpeed;
	$block++;
//OCTV MODIFY

	// Origin Axis
	// It is toggled on/off here rather than in initialGUI.mel because:
	// 1. initialGUI.mel is for batch mode only while initHUD.mel is for both batch mode and GUI mode.
	// 2. Origin Axis checkbox is located under Heads Up Display menu and next to View Axis checkbox.
	// 3. Origin Axis is functionally similar to View Axis.
	toggleAxis -o `optionVar -q toggleOriginAxis`;
	
	headsUpDisplay -s 7
		-b 1
		-vis false
		-label	(uiRes("m_initHUD.kHUDWalkModeLabel"))
		-allowOverlap		true
		HUDWalkMode;
	
	headsUpDisplay -s 7
		-b 3
		-vis false
		-allowOverlap true
		HUDBlendShapeEdit;

	scriptJob -event SceneOpened updateBlendShapeEditHUD;

	headsUpDisplay -s 7
		-b 2
		-vis false
		-allowOverlap		true
		HUDActiveSculptMesh;

}

//OCTV MODIFY
global proc string octvGetUserName()
{
	string $username = `getenv  username`;
	return $username;
}
global proc string octvGetFileName()
{
	string $OCVTsceneName = basenameEx(`file -q -sceneName`);
	if(sizeBytes($OCVTsceneName) == 0)
	{
	 	$OCVTsceneName = "untitled";
	}
    return $OCVTsceneName;
}
global proc string octvGetCamSpeed()
{
	int $start_frame = `playbackOptions -q -ast`;
	int $current_frame = `currentTime -q`;
	string $unit = `currentUnit -q -time`;
	string $current_cam = `headsUpDisplay -q -l HUDCameraNames`;
	float $cam_speed;
	global float $cam_speedZZF;
	float $D_Cam;
	float $D_FPS;
	float $tem;
	float $cam_posX[];
	float $cam_posY[];
	float $cam_posZ[];
	global float $cam_pos_D[];
	float $fps;
	python("import os");

	if( $unit == "game" ) {
	    $fps = 15;
	} else if( $unit == "film" ) {
	    $fps = 24;
	} else if( $unit == "pal" ) {
	    $fps = 25;
	} else if( $unit == "ntsc" ) {
	    $fps = 30;
	} else if( $unit == "show" ) {
	    $fps = 48;
	} else if( $unit == "palf" ) {
	    $fps = 50;
	} else if( $unit == "ntscf" ) {
	    $fps = 60;
	}	

	$cam_speed = 0.0;
	$D_Cam = 0.0;
	if(`objExists camSpeed_Loc`){
		if (!`attributeExists "camSpeed" |camSpeed_Loc`){
			addAttr -ln "camSpeed"  -at double  -dv 0 |camSpeed_Loc;
			setAttr -e-keyable true |camSpeed_Loc.camSpeed;
		}
	}
	else{
		spaceLocator -n "camSpeed_Loc";
		parentConstraint -w 1 $current_cam camSpeed_Loc;
		addAttr -ln "camSpeed"  -at double  -dv 0 |camSpeed_Loc;
		setAttr -e-keyable true |camSpeed_Loc.camSpeed;
	}

	if ($current_frame == $start_frame){
		for($k=0;$k<($fps/2);$k++){    	
	    	$cam_pos_D[$k] = 0.0;
	    }
	}	    
	else{
		for($k=0;$k<($fps/2+1);$k++){
			$cam_posX[$k] = `getAttr -time ($current_frame-$fps/2+$k) camSpeed_Loc.tx`;
			$cam_posY[$k] = `getAttr -time ($current_frame-$fps/2+$k) camSpeed_Loc.ty`;
			$cam_posZ[$k] = `getAttr -time ($current_frame-$fps/2+$k) camSpeed_Loc.tz`;	
		}
		for($k=0;$k<($fps/2);$k++){
		    $D_Cam = sqrt(pow(($cam_posX[$k+1]-$cam_posX[$k]),2)+pow(($cam_posY[$k+1]-$cam_posY[$k]),2)+pow(($cam_posZ[$k+1]-$cam_posZ[$k]),2));
		    $cam_pos_D[$k] = $D_Cam;
		    $D_FPS += $cam_pos_D[$k];   	
	    }
	    
	    $tem = $D_FPS/($fps/2)*$fps;
	    $cam_speed = python("round("+$tem+",3)");
	}
	$cam_speedZZF = $cam_speed;
	return $cam_speed;
}
global proc string octvGetCamAccSpeed()
{
	int $start_frame = `playbackOptions -q -ast`;
	int $current_frame = `currentTime -q`;
	string $unit = `currentUnit -q -time`;
	string $current_cam = `headsUpDisplay -q -l HUDCameraNames`;
	float $cam_acc_speed;
	global float $cam_acc_speedZZF;
	float $V_start_cam;
	float $V_end_cam;
	float $D_acc_FPS;
	float $tem_acc;
	float $cam_posX[];
	float $cam_posY[];
	float $cam_posZ[];
	float $fps;
	python("import os");

	if( $unit == "game" ) {
	    $fps = 15;
	} else if( $unit == "film" ) {
	    $fps = 24;
	} else if( $unit == "pal" ) {
	    $fps = 25;
	} else if( $unit == "ntsc" ) {
	    $fps = 30;
	} else if( $unit == "show" ) {
	    $fps = 48;
	} else if( $unit == "palf" ) {
	    $fps = 50;
	} else if( $unit == "ntscf" ) {
	    $fps = 60;
	}	


	$cam_acc_speed = 0.0;
	if(`objExists camSpeed_Loc`){
		if (!`attributeExists "camAccSpeed" |camSpeed_Loc`){
			addAttr -ln "camAccSpeed"  -at double  -dv 0 |camSpeed_Loc;
			setAttr -e-keyable true |camSpeed_Loc.camAccSpeed;
		}
	}
	else{
		spaceLocator -n "camSpeed_Loc";
		parentConstraint -w 1 $current_cam camSpeed_Loc;
		addAttr -ln "camAccSpeed"  -at double  -dv 0 |camSpeed_Loc;
		setAttr -e-keyable true |camSpeed_Loc.camAccSpeed;
	}
 

	for($k=0;$k<3;$k++){
		$cam_posX[$k] = `getAttr -time ($current_frame-$k) camSpeed_Loc.tx`;
		$cam_posY[$k] = `getAttr -time ($current_frame-$k) camSpeed_Loc.ty`;
		$cam_posZ[$k] = `getAttr -time ($current_frame-$k) camSpeed_Loc.tz`;
	}

    $V_start_cam = sqrt(pow(($cam_posX[0]-$cam_posX[1]),2)+pow(($cam_posY[0]-$cam_posY[1]),2)+pow(($cam_posZ[0]-$cam_posZ[1]),2));
    $V_end_cam = sqrt(pow(($cam_posX[1]-$cam_posX[2]),2)+pow(($cam_posY[1]-$cam_posY[2]),2)+pow(($cam_posZ[1]-$cam_posZ[2]),2));
    $D_acc_FPS = $V_start_cam - $V_end_cam;
    
    $tem_acc = $D_acc_FPS*$fps;
    $cam_acc_speed = python("round("+$tem_acc+",3)");

	$cam_acc_speedZZF = $cam_acc_speed;
	return $cam_acc_speed;
}
//OCTV MODIFY 