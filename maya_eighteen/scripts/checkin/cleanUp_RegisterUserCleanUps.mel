// Copyright (C) 1997-2011 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//-----------------------------------------------------------------------
//
//  Creation Date:  January 16, 2003
//
//  Procedure Name:
//      cleanUp_RegisterUserCleanUps
//
//  Description:
//
//		Initialization function that is called when the Optimize Scene
//		Size operation is invoked.  The purpose of this function is to
//		allow users to register their own custom cleanup operations.
//
//  Input Arguments: none
//
//	Return Value: None.
//
//-----------------------------------------------------------------------
global proc cleanUp_RegisterUserCleanUps()
{
	//	use the cleanUp_AddUserCleanUp() proc to register all your
	//	custom cleanup steps here.
	//
	
	//	Here's an example of how to add register a custom cleanup step.
	//
	//cleanUp_AddUserCleanUp( "deleteCustomShaders",
	//						"Remove mr Custom Shaders",
	//						1,
	//						"deleteAllCustomShaders()" );


	cleanUp_AddUserCleanUp( "lightLinker1",
							"lightLinker1",
							1,
							"OCTVOptLightlinker1()" );
	cleanUp_AddUserCleanUp( "audio",
							"Audios",
							0,
							"OCTVDelAudios()" );
	cleanUp_AddUserCleanUp( "annotation",
							"Annotations",
							0,
							"OCTVDelAnnotations()" );
	cleanUp_AddUserCleanUp( "imagePlane",
							"ImagePlane",
							0,
							"OCTVDelImagePlanes()" );
	cleanUp_AddUserCleanUp( "jiggle",
							"Jiggles",
							1,
							"OCTVDelJiggles()" );

	cleanUp_AddUserCleanUp( "defaultlambert",
							"Default Lambert",
							1,
							"OCTVCleanupDefaultLambert()" );

	cleanUp_AddUserCleanUp( "polySplitExpOption",
							"PolySplit Expressions",
							1,
							"OCTVDelPolySplitExp()" );
	cleanUp_AddUserCleanUp( "RedExp",
							"Expressions",
							1,
							"OCTVDelRedExps()" );
	cleanUp_AddUserCleanUp( "delComponent",
							"DeleteComponents",
							1,
							"OCTVDelDeleteComponents()" );
	cleanUp_AddUserCleanUp( "PolyGeometries",
							"PolyGeometries",
							1,
							"OCTVDelPolyGeometries()" );
	cleanUp_AddUserCleanUp( "choice",
							"Choices",
							1,
							"OCTVDelChoices()" );
	cleanUp_AddUserCleanUp( "polySmoothFace",
							"PolySmoothFaces",
							1,
							"OCTVDelPolySmoothFaces()" );
	cleanUp_AddUserCleanUp( "rigidSolver",
							"RigidSolvers",
							1,
							"OCTVDelRigidSolvers()" );
	cleanUp_AddUserCleanUp( "brush",
							"Brushes",
							1,
							"OCTVDelBrushes()" );
	cleanUp_AddUserCleanUp( "Fur",
							"Furs",
							1,
							"OCTVDelFurs()" );
	cleanUp_AddUserCleanUp( "materialInfo",
							"MaterialInfos",
							1,
							"OCTVDelMaterialInfos()" );
	cleanUp_AddUserCleanUp( "view",
							"Views",
							1,
							"OCTVDelViews()" );
	cleanUp_AddUserCleanUp( "mental",
							"MentalrayItemsList",
							0,
							"OCTVDelMentalrayItemsList()" );
	cleanUp_AddUserCleanUp( "partition",
							"Empty Partitions",
							1,
							"OCTVDelPartitions()" );
	cleanUp_AddUserCleanUp( "projectSurf",
							"ProjectSurfs",
							1,
							"OCTVCleanupProjectSurf()" );
	cleanUp_AddUserCleanUp( "layeredTexture",
							"layeredTexture",
							1,
							"OCTVOptimizeLayeredTexture()" );
	cleanUp_AddUserCleanUp( "renderSphere",
							"RenderSpheres",
							1,
							"OCTVOptimizeRenderSphere()" );
}

global proc int OCTVOptLightlinker1()
{
	print "Removing connections between lightLinker1 and hyperGraphLayout or initialShadingGroup\n";
	print "--------------------------------\n";

	int $numDel = 0;

	string $lightLinkers[] = `ls -type "lightLinker"`;
	for ($lightLinker in $lightLinkers)
	{
		string $links[]  = `ls ($lightLinker + ".lnk[*].olnk")`;
		for ($i=0; $i<size($links); $i++)
		{
			string $att = $lightLinker + ".lnk[" + $i + "]"; 
			if(`isConnected "hyperGraphLayout.msg" $links[$i]` || `isConnected "initialShadingGroup.msg" $links[$i]` || `isConnected "defaultLightSet.msg" $links[$i]`)
			{
				removeMultiInstance -b 1 $att;
				$numDel ++;
			}
		}
	}

	cleanUp_Summary( "Removed connections between lightLinker1 and hyperGraphLayout|initialShadingGroup|defaultLightSet", ("Removed " + $numDel + " connections between lightLinker1 and hyperGraphLayout or initialShadingGroup") );

	print "\n";

	return $numDel;
}

global proc OCTVDelAudios()
{
	print "Removing all audios\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $audios[] = `ls -type audio`;
		for ($item in $audios)
			$numDel += deleteIfNotReferenced($item);
		cleanUp_Summary( "Removed all audios", ("Removed " + $numDel + " audios") );
	print "\n";
}

global proc OCTVDelAnnotations()
{
	print "Removing all annotations\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $audios[] = `ls -type annotationShape`;
		for ($item in $audios)
			$numDel += deleteIfNotReferenced($item);
		cleanUp_Summary( "Removed all annotations", ("Removed " + $numDel + " annotations") );
	print "\n";
}

global proc OCTVDelImagePlanes()
{
	print "Removing all imagePlanes\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $imagePlanes[] = `ls -type imagePlane`;
		for ($item in $imagePlanes)
			$numDel += deleteIfNotReferenced($item);
		cleanUp_Summary( "Removed all imagePlane", ("Removed " + $numDel + " imagePlanes") );
	print "\n";
}

global proc OCTVDelJiggles()
{
	print "Removing all jiggles\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $imagePlanes[] = `ls -type jiggle`;
		for ($item in $imagePlanes)
			$numDel += deleteIfNotReferenced($item);
		cleanUp_Summary( "Removed all jiggles", ("Removed " + $numDel + " jiggles") );
	print "\n";
}

global proc OCTVDelPolySplitExp()
{
	print "Removing unused polySplit expressions\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $exp[] = `ls -type expression`;
		for ($item in $exp)
		    if (`gmatch $item "*polySplit*"`)
				$numDel += deleteIfNotReferenced($item);
		cleanUp_Summary( "Removed unused polySplit expressions", ("Removed " + $numDel + " unused polySplit expressions") );
	print "\n";
}

global proc OCTVDelRedExps()
{
	print "Removing unused expressions\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $exp[] = `ls -type expression`;
		for ($item in $exp)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0 )
				$numDel += deleteIfNotReferenced($item);
			else {
				$cons = stringArrayRemoveDuplicates($cons);
				$cons = stringArrayRemove({$item}, $cons);
				if (size($cons) == 1 && `nodeType $cons[0]` == "time")
					$numDel += deleteIfNotReferenced($item);
			}
		}
		cleanUp_Summary( "Removed unused expressions", ("Removed " + $numDel + " unused expressions") );
	print "\n";
}

global proc OCTVDelDeleteComponents()
{
	print "Removing unused deleteComponents\n";
	print "---------------------------------\n";
		int $numDel = 0;
		string $comp[] = `ls -type deleteComponent`;
		for ($item in $comp)
		{
			string $source[] = `listConnections -s 1 -d 1 $item`;
			if (`size($source)`==0)
				$numDel += deleteIfNotReferenced($item);
		}
		cleanUp_Summary( "Removed unused deleteComponents", ("Removed " + $numDel + " unused deleteComponents") );
	print "\n";
}


global proc OCTVDelPolyGeometries()
{
	print "Removing unused polyGeometries\n";
	print "---------------------------------\n";
		int $numDel = 0;

		//delete unused nodes
		string $pcobj[] = `ls -type polyCube -type polyCylinder -type polyPlane -type polySphere -type polyCone -type polyAutoProj -type polyPlanarProj -type subdHierBlind`;
		for ($item in $pcobj)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0)
				$numDel += deleteIfNotReferenced($item);
		}

	string $polyCopyUVs[] = `ls -type "polyCopyUV"`;
	for ($polyCopyUV in $polyCopyUVs)
	{
		string $connections[] = `listConnections $polyCopyUV`;
		if (!size($connections))
		{
			$numDel += deleteIfNotReferenced($polyCopyUV);
		}
	}

		cleanUp_Summary( "Removed unused polyGeometries", ("Removed " + $numDel + " unused polyGeometries") );
	print "\n";
}


global proc OCTVDelChoices()
{
	print "Removing unused choices\n";
	print "---------------------------------\n";
		int $numDel = 0;
		string $chs[] = `ls -type choice`;
		for ($item in $chs)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0)
				$numDel += deleteIfNotReferenced($item);
		}
		cleanUp_Summary( "Removed unused choices", ("Removed " + $numDel + " unused choices") );
	print "\n";
}

global proc OCTVDelPolySmoothFaces()
{
	print "Removing unused polySmoothFaces\n";
	print "---------------------------------\n";
		int $numDel = 0;
		string $chs[] = `ls -type polySmoothFace`;
		for ($item in $chs)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0)
				$numDel += deleteIfNotReferenced($item);
		}
		cleanUp_Summary( "Removed unused polySmoothFaces", ("Removed " + $numDel + " unused polySmoothFaces") );
	print "\n";
}

global proc OCTVDelRigidSolvers()
{
	print "Removing unused rigidSolvers\n";
	print "---------------------------------\n";
		int $numDel = 0;
		string $chs[] = `ls -type rigidSolver`;
		for ($item in $chs)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 1 && `nodeType $cons[0]` == "time")
				$numDel += deleteIfNotReferenced($item);
		}
		cleanUp_Summary( "Removed unused rigidSolvers", ("Removed " + $numDel + " unused rigidSolvers") );
	print "\n";
}

global proc OCTVDelBrushes()
{
	print "Removing unused brushes\n";
	print "-----------------------\n";
		int $numDel = 0;
		string $brushes[];
		catch($brushes = `ls -type "brush"`);
		for ($item in $brushes)
		{
			string $used[] = `listConnections -source true -destination true $item`;
			if (size($used) == 0)
				$numDel += deleteIfNotReferenced($item);
		}
		cleanUp_Summary( "Removed unused brushes", ("Removed " + $numDel + " unused brushes") );
	print "\n";
}

global proc OCTVDelFurs()
{
	if (`pluginInfo -q -loaded Fur`)
	{
		print "Removing unused furs\n";
		print "-----------------------\n";
			int $numDel = 0;

			string $FDnodes[] = `ls -type FurDescription`;
			string $item, $mesh[], $nurbsSF[];
			for ($item in $FDnodes)
			{
				$mesh = `listConnections -s on -d off -t mesh $item`;
				$nurbsSF = `listConnections -s on -d off -t nurbsSurface $item`;
				if (!size($mesh) && !size($nurbsSF))
					$numDel += deleteIfNotReferenced($item);
			}
			cleanUp_Summary( "Removed unused furs", ("Removed " + $numDel + " unused furs") );
		print "\n";
	}
}


global proc OCTVDelMaterialInfos()
{
	if (`pluginInfo -q -loaded Mayatomr`)
	{
		//delete unused mentalraySubdivApprox nodes
		string $files[] = `ls -type mentalraySubdivApprox`;
		for ($item in $files)
		{
			string $cons[] = `listConnections -s 0 -d 1 -type mesh $item`;
			if (size($cons) == 0)
				deleteIfNotReferenced $item;
		}

		string $objs[] = `ls -dag -ni -type transform`;
		for ($item in $objs)
		{
			string $cons[] = `listConnections -s 0 -d 1 -type mentalraySubdivApprox $item`;
			if (size($cons) == 0)
			{
				string $lS[] = `listAttr -ud -st subdiv $item`;
				if (size($lS) == 1)
					deleteAttr -at "subdiv" $item;
			}
		}
	}
	print "Removing unused materialInfos\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $allminfo[] = `ls -type materialInfo`;
		int $infoCount = 0;
		int $sz = size($allminfo);
		int $i = 1;
		int $j = 1;
		for($item in $allminfo)
		{
			if($j == 1000)
			{
			  int $ps = 100 * (float)$i / (float)$sz;
			  $j = 0;
			}

			if(!`connectionInfo -id ($item + ".shadingGroup")`)
			{
				$infoCount++;
				$numDel += deleteIfNotReferenced($item);
			}
			$i++;
			$j++;
		}

		clear $allminfo;
		cleanUp_Summary( "Removed unused materialInfos", ("Removed " + $numDel + " unused materialInfos") );
	print "\n";
}

global proc OCTVDelViews()
{
	print "Removing  unused views\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $CAMV[] = `ls -type cameraView`;
		for ($item in $CAMV)
			deleteIfNotReferenced $item;
		string $HV[] = `ls -type hyperView`;
		for ($item in $HV)
			$numDel += deleteIfNotReferenced($item);
		cleanUp_Summary( "Removed unused views", ("Removed " + $numDel + " unused views") );
	print "\n";
}

global proc OCTVDelMentalrayItemsList()
{
	print "Removing  unused mentalrayItemsList\n";
	print "--------------------------------\n";
		int $numDel = 0;
		if(`objExists mentalrayItemsList`)
			$numDel += deleteIfNotReferenced("mentalrayItemsList");
		cleanUp_Summary( "Removed unused mentalrayItemsList", ("Removed " + $numDel + " unused mentalrayItemsList") );
	print "\n";
}

// check the maya default lambert1
global proc OCTVCleanupDefaultLambert()
{
	print "Cleaning default lambert\n";
	print "---------------------------------\n";

		int $numDel = 0;
		int $flag = 0;


		// get all the nodes that connected to this material
		string $allConnections[]=`listConnections -s 1 -d 0 lambert1`;

		// disconnect them
		for($item in $allConnections)
		{
			deleteIfNotReferenced $item;
			$flag = 1;
		}

		float $vec[] = `getAttr "lambert1.color"`;
		if ($vec[0] != 0.500 && $vec[1] != 0.500 && $vec[2] != 0.500)
		{
			setAttr "lambert1.color" -type double3 0.500 0.500 0.500 ;
			$flag = 1;

		}

		float $vec[] = `getAttr "lambert1.transparency"`;
		if ($vec[0] != 0.000 && $vec[1] != 0.000 && $vec[2] != 0.000)
		{
			setAttr "lambert1.transparency" -type double3 0.000 0.000 0.000 ;
			$flag = 1;
		}

		float $vec[] = `getAttr "lambert1.ambientColor"`;
		if ($vec[0] != 0.000 && $vec[1] != 0.000 && $vec[2] != 0.000)
		{
			setAttr "lambert1.ambientColor" -type double3 0.000 0.000 0.000 ;
			$flag = 1;
		}

		float $vec[] = `getAttr "lambert1.incandescence"`;
		if ($vec[0] != 0.000 && $vec[1] != 0.000 && $vec[2] != 0.000)
		{
			setAttr "lambert1.incandescence" -type double3 0.000 0.000 0.000 ;
			$flag = 1;
		}

		string $vals = `getAttr "lambert1.diffuse"`;
		if ($vals != "0.8000000119")
		{
			setAttr "lambert1.diffuse" 0.8000000119;
			$flag = 1;
		}

		float $val = `getAttr "lambert1.translucence"`;
		if ($val != 0.000)
		{
			setAttr "lambert1.translucence" 0.000;
			$flag = 1;
		}

		float $val = `getAttr "lambert1.translucenceDepth"`;
		if ($val != 0.500)
		{
			setAttr "lambert1.translucenceDepth" 0.500;
			$flag = 1;
		}

		float $val = `getAttr "lambert1.translucenceFocus"`;
		if ($val != 0.500)
		{
			setAttr "lambert1.translucenceFocus" 0.500;

			$flag = 1;
		}

		float $val = `getAttr "lambert1.hideSource"`;
		if ($val != 0)
		{
			setAttr "lambert1.hideSource" 0;
			$flag = 1;
		}

		float $val = `getAttr "lambert1.matteOpacityMode"`;
		if ($val != 2)
		{
			setAttr "lambert1.matteOpacityMode" 2;
			$flag = 1;
		}

		float $val = `getAttr "lambert1.refractions"`;
		if ($val != 0.000)
		{
			setAttr "lambert1.refractions" 0.000;
			$flag = 1;
		}

		if ($flag)
			$numDel++;

		cleanUp_Summary( "Cleanup lambert1", ("Cleanup " + $numDel + " lambert1") );

	print "\n";
}


global proc int OCTVDelPartitions()
{
	int $dirty;

	print "Delete all empty partitions\n";
	print "---------------------------\n";

	string $buf[] = `ls -type "partition"`;
	for ($partition in $buf)
	{
		if ($partition != "characterPartition" && $partition != "renderPartition")
		{
			string $buf1[] = `partition -query $partition`;
			if (!size($buf1))
			{
				evalEcho ("delete " + $partition);
				$dirty = true;
			}
		}
	}

	print "\n";

	return $dirty;
}


global proc int OCTVCleanupProjectSurf()
{
	int $dirty;

	if (`pluginInfo -q -loaded projectSurf`)
	{
		print "Set projectSurfs' fastProject\n";
		print "-----------------------------\n";

		string $buf[];
		catch($buf = `ls -long -type "projectSurf"`);
		for ($projectSurf in $buf)
		{
			string $attr = $projectSurf + ".fastProject";
			if (`objExists $attr`)
			{
				if (`getAttr $attr`)
				{
					evalEcho ("setAttr \"" + $attr + "\" false");
					$dirty = true;
				}
			}
		}

		print "\n";
	}

	return $dirty;
}

global proc OCTVOptimizeLayeredTexture()
{
	print "Delete unused layeredTexture socket\n";
	string $layerTextures[]=`ls -type layeredTexture`;
	for ($item in $layerTextures)
	{
		string $inputsList[]=`listAttr -multi ($item+".inputs")`;
		string $inColor[]={};
		$inColor=`listConnections -d 0 -s 1 -plugs 1 ($item+"."+$inputsList[1])`;
		string $inAlpha[]={};
		$inAlpha=`listConnections -d 0 -s 1 -plugs 1 ($item+"."+$inputsList[5])`;

	if ((!`size($inColor)`)&&(!`size($inAlpha)`))
	{
		float $inColorR=`getAttr ($item+"."+$inputsList[2])`;
		float $inColorG=`getAttr ($item+"."+$inputsList[3])`;
		float $inColorB=`getAttr ($item+"."+$inputsList[4])`;
		float $alpha=`getAttr ($item+"."+$inputsList[5])`;
		if (($inColorR+$inColorG+$inColorB==0)&&($alpha==1))
		{
			evalDeferred("removeMultiInstance -break true "+$item+"."+$inputsList[0]+";");

		}

	}

	if ($inputsList[0]=="inputs[0]")	continue;		//if the first input is 0 ,jump

	//color********************************
	string $inColor[]={};
	$inColor=`listConnections -d 0 -s 1 -plugs 1 ($item+"."+$inputsList[1])`;
	if (`size($inColor)`)	connectAttr $inColor[0] ($item+".inputs[0].color");
	else
	{
		float $inColorR=`getAttr ($item+"."+$inputsList[2])`;
		float $inColorG=`getAttr ($item+"."+$inputsList[3])`;
		float $inColorB=`getAttr ($item+"."+$inputsList[4])`;
		setAttr ($item+".inputs[0].colorR") 	$inColorR;
		setAttr ($item+".inputs[0].colorG") 	$inColorG;
		setAttr ($item+".inputs[0].colorB") 	$inColorB;
	}
	//alpha********************************
	string $inAlpha[]={};
	$inAlpha=`listConnections -d 0 -s 1 -plugs 1 ($item+"."+$inputsList[5])`;
	if (`size($inAlpha)`)	connectAttr $inAlpha[0] ($item+".inputs[0].alpha");
	else
	{
		float $alpha=`getAttr ($item+"."+$inputsList[5])`;
		setAttr ($item+".inputs[0].alpha") 	$alpha;
	}
	//blendMode********************************
	string $inBlend[]={};
	$inBlend=`listConnections -d 0 -s 1 -plugs 1 ($item+"."+$inputsList[6])`;
	if (`size($inBlend)`)	connectAttr $inBlend[0] ($item+".inputs[0].blendMode");
	else
	{
		float $blend=`getAttr ($item+"."+$inputsList[6])`;
		setAttr ($item+".inputs[0].blendMode") 	$blend;
	}
	//isVisible********************************
	string $inVis[]={};
	$inVis=`listConnections -d 0 -s 1 -plugs 1 ($item+"."+$inputsList[7])`;
	if (`size($inVis)`)	connectAttr $inVis[0] ($item+".inputs[0].isVisible");
	else
	{
		float $vis=`getAttr ($item+"."+$inputsList[7])`;
		setAttr ($item+".inputs[0].isVisible") 	$vis;
	}

	//break original connection;
	evalDeferred("removeMultiInstance -break true "+$item+"."+$inputsList[0]+";");
	}

	print "Optimized LayeredTexture DONE!";
	print "\n";
}

global proc int OCTVOptimizeRenderSphere()
{
	int $numDel = 0;

	print "Remove renderSpheres from initialShadingGroup\n";
	print "---------------------------------------------\n";

	string $renderSpheres[] = `sets -query "initialShadingGroup"`;
	for ($renderSphere in $renderSpheres)
	{
		if (`nodeType $renderSphere` == "renderSphere")
		{
			evalEcho ("sets -remove \"initialShadingGroup\" \"" + $renderSphere + "\"");
			$numDel ++;
		}
	}

	cleanUp_Summary( "Remove renderSpheres from initialShadingGroup", ("Removed " + $numDel + " renderSpheres from initialShadingGroup") );
	print "\n";

	return $numDel;
}

