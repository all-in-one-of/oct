global proc clearLJ_zqs()
 {
 //frome ch1 functions
	deleteUnusedCommon( "stitchSrf", 0 );
    deleteUnusedCommon( "rebuildSurface", 0 );
    deleteUnusedCommon( "insertKnotSurface", 0 );
    deleteUnusedCommon( "avgNurbsSurfacePoints", 0 );
    deleteUnusedCommon("animCurve", 0);
    deleteUnusedCommon("snapshot", 1);
    deleteUnusedCommon("unitConversion", 1);
    deleteUnusedCommon("timeToUnitConversion", 1);
    deleteUnusedCommon("unitToTimeConversion", 1);
	clearCache -allNodes;
	deleteEmptyGroups();
	deleteEmptyLayers("Display");
	//deleteEmptyLayers("Render");
	deleteUnusedPairBlends();
	deleteUnusedExpressions();
	dlight();
	deleteGroupID_D;
	hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");
  }
	//delete unused mat nodes
//	hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");
//  size(`listRelatives -c -ad -type "transform"`);
//  size(`listRelatives -c -ad -ni -type "mesh"`);
///////////////////////delete  empty group///////////////////////////////////
global proc deleteEmptyGroup()
{
    int $on = 1;
    int $cout = 0;
    while($on && size(`ls -sl`))
    {
        $on = 0;
        string $tr[] = `listRelatives -f -c -ad -type "transform"`;
        string $trT;
        for($trT in $tr)
        {
            string $trChild[] = `listRelatives -f -c $trT`;
            if((!size($trChild) && !size(`listConnections $trT`)) || !`getAttr ($trT+".visibility")`)
            {
                if(catch(`delete $trT`)){$on = 0;break;}
                print("deleting unsued transform node ==> "+$trT + "\n");
                $on ++;
                $cout++;
            }
        }
    }
    print("delete empty  number is ==> " + $cout + "\n");
}
//         deleteEmptyGroup;
///////////////////////////proc/////////////////////////////////////////////////

//////////test based group id message to delete group id ///////////////////////////
///////////////////////rename////////////////////////////////////////////
/*

string $newName = "jianZhu_comMat_";
string $ls[] = `ls -sl`;
string $t;
for($t in $ls)
{
    rename $t $newName ;
}

*/
///////////////////////////D///////////////////////////////////////
global proc deleteGroupID_D()
{
	string $gID_all[] = `ls -type "groupId"`;
	string $gID_T;
	int $cout_dID = 0;
	for($gID_T in $gID_all)
	{
		string $idCo[] = `listConnections  $gID_T`;
		if(size($idCo)<1)
		{
			delete $gID_T;
			print("deleted groupID ==> "+$gID_T+"\n");
			$cout_dID++;
		}
	}
	print("deleted no use group id count is ==> "+$cout_dID+"\n");
}
///////////////////////////////////dl/////////////////////////////////////////
global proc dlight()
{
	float $i,$m=0;
	for ($i=2;$i<1000000;$i=$i+1)
	{
	   float $a;float $b;
		 $a=`isConnected  defaultLightSet.message lightLinker1.link[$i].llnk`;
		 $b=`isConnected  defaultLightSet.message lightLinker1.link[$i].olnk`;
	  if  ($m<80000)
	   {
		 if (($a==1)&&($b==1))
		  {
		   disconnectAttr defaultLightSet.message lightLinker1.link[$i].llnk;
		   disconnectAttr defaultLightSet.message lightLinker1.link[$i].olnk;
		   $m=0;
		   string $lightNum=" "+$i+" none use light linker is deleted";
		   text -e -label $lightNum -align "left" textOutput;

		  }
		 else $m++;
	   }
	  else
	   break;
	}
}
global proc int deleteUnusedExpressions() {

	int $deletedCount = 0;

	//  Get a list of all expression nodes.
	//
	string $nodeList[];
	clear( $nodeList );
	$nodeList = `ls -type expression`;

	// Iterate through list of nodes
	//
	int $i;
	int $nodeCount = size( $nodeList );
	for ($i = 0; $i  < $nodeCount; $i++)
	{
		// See if this node's "output" attribute has any
		// outgoing connections.
		//
        string $outputs[];
        clear( $outputs );
        $outputs = `listConnections -source false -destination true -skipConversionNodes true ($nodeList[$i]+".output")`;
        if( size( $outputs ) == 0 )
		{
			if( deleteIfNotReferenced( $nodeList[$i] ) ) {
				$deletedCount++;
			}
		}
	}
	return $deletedCount;
}

global proc deleteUnusedPairBlends()
//
// Description:
//  Deletes pairBlends that meet the following criteria:
//   1. have no outputs, or
//   2. have no connections to input2
//
{
	string $pairBlends[] = `ls -type pairBlend`;
	for ($pairBlend in $pairBlends) {
		int $deleteIt = 0;
		string $conns[] = `listConnections -s 0 -d 1 $pairBlend`;
		if (0 == size($conns)) {
			$deleteIt = 1;
		} else {
			string $inputs[] = `pairBlend -q -input2 $pairBlend`;
			if (0 == size($inputs)) {
				$deleteIt = 1;
			}
		}
		if ($deleteIt) {
			deleteIfNotReferenced($pairBlend);
		}
	}
}

global proc deleteUnusedCommon(string $typ, int $minVal)
{
    int $i;
    string $nodeList[] = `ls -typ $typ`;

    for ($i = 0; $i < size($nodeList); $i++) {
        if (!isNodeUsed($nodeList[$i], $minVal)) {
            deleteIfNotReferenced $nodeList[$i];
        }
    }
}


/////////////////////////////////////////////////////////////////////////
global proc int isNodeUsed(string $node, int $minVal)
//
// Description:
//      Function to return whether a node is used in the scene.
//
// Arguments:
//      node    Name of the node to test.
//      minVal  Minimum number of connections the node must have to be
//              considered used (ie. a node must have more than this
//              number to be considered used.
//
// Returns:
//      1   - the node is used by the scene
//      0   - this node doesn't have enough connections, its unused.
//
// Author:
//      cdt (March 2002)
//
{
    int $isUsed = 1;

    if ($node != "characterPartition") {
	    // sometimes related nodes might delete others on the
	    // list, so need to check if the node still exists.
	    string $reallyExist[] = `ls $node`;

        if (size($reallyExist) != 0) {
            string $connectionList[] = `listConnections $node`;

            if (size($connectionList) <= $minVal)
            {
                $isUsed = 0;
            }
        }
    }

    return $isUsed;
}


global proc string[] listEmptyGroups( )
//
//	Lists groups with no relatives or connections,
//	and supplies them to the calling proc to
//	do with as needed.
//
{
	string $obj;
	string $unused[];
	string $xforms[] = `ls -transforms -leaf`;
	for( $obj in $xforms ) {
		if( size( listRelatives("-c", $obj) ) == 0 ) {
			if( `objectType $obj` == "transform") {
				string $conn[] = `listConnections($obj)`;
				if( size( $conn ) == 0 ) {
					$unused[size($unused)] = $obj;
				} else if( (size( $conn ) == 1)
					   &&  (`objectType $conn[0]` == "displayLayer") ) {
					$unused[size($unused)] = $obj;
				} else if( (size( $conn ) == 1)
					   &&  (`objectType $conn[0]` == "renderLayer") ) {
					$unused[size($unused)] = $obj;
				}
			}
		}
	}
	return $unused;
}

global proc deleteEmptyGroups( )
//
//	Deletes anything returned by listEmptyGroups,
//	until the list itself is empty
//
{
	int $i;
	string $unused[] = `listEmptyGroups`;
	int $numTransf = size(`ls -transforms`);
	int $numUnused = size($unused);
	while ( $numUnused > 0 ) {
		for ($i = 0; $i < size($unused); $i++) {
			deleteIfNotReferenced( $unused[$i] );
		}
		$unused = `listEmptyGroups`;

		// 132335: need to avoid infinite loop possibility
		// if referenced files - nothing deleted.
		if (size($unused) == $numUnused &&
			size(`ls -transforms`) == $numTransf) {
			break;
		} else {
			$numUnused = size($unused);
			$numTransf = size(`ls -transforms`);
		}
	}
}
global proc deleteEmptyLayers(string $type)
//
// If $type == "Display" then delete display layers
// If $type == "Render" then delete render layers
//
{
	string $objectType, $layer;
	string $layerArray[], $layerContents[];

	if ("Display" == $type) {
		$objectType = "displayLayer";
	} else {
		$objectType = "renderLayer";
	}

	//	Get all layers of the appropriate type.
	//
	$layerArray = `ls -type $objectType`;

	//	Determine the contents of each layer. Ignore default layers.
	//
	int $index = 0;
	for ($layer in $layerArray) {

		//	Ignore default layers. Default layers have an id of 0.
		//
		if (0 < `getAttr ($layer + ".identification")`) {
			if ("Display" == $type) {
				$layerContents = `editDisplayLayerMembers -query $layer`;
			} else if ("Render" == $type) {
				$layerContents = `editRenderLayerMembers -query $layer`;
			}
			if (0 == size($layerContents)) {
				//
				//	This layer has nothing in it. Delete it.
				//
				deleteIfNotReferenced ($layer);
			}
		}
	}
}