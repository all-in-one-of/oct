proc HfTDebug(
	string	$tag,
	string	$debug
)
{
}

proc string stripMultiIndex( string $plug )
{
	string	$multiIndex = match( "\\[[0-9]*\\]", $plug );

	if ( $multiIndex == "" ) {
		return $plug;
	}

	string	$stripped = substring( $plug, 1, (size($plug) - size($multiIndex)) );

	return $stripped;
}

proc int getMultiIndex( string $plug )
{
	string	$multiIndexB = match( "\\[[0-9]*\\]", $plug );

	if ( $multiIndexB == "" ) {
		return -1;
	}

	string	$multiIndexStr = substring( $multiIndexB, 2, (size($multiIndexB)-1) );
	int		$multiIndex = $multiIndexStr;

	return $multiIndex;
}

proc string baseFromHairMapsAttr(
	string	$hairMapsAttr
)
{
	int		$l = size( $hairMapsAttr );

	if ( $l > 3 ) {
		string	$temp = substring( $hairMapsAttr, $l - 2, $l );

		if ( $temp == "Map" ) {
			$temp = substring( $hairMapsAttr, 1, $l - 3 );
			return $temp;
		} else {
			return "";
		} 
	} else {
		return "";
	}
}

proc string hairMapUSamplesAttr(
	string	$baseAttr
)
{
	return ($baseAttr + "MapUSamples");
}

proc string hairMapVSamplesAttr(
	string	$baseAttr
)
{
	return ($baseAttr + "MapVSamples");
}


proc string[] getDstPlugs(
	string	$srcPlug
)
{
	string	$dstPlugs[];
	
	// work around bug in connectionInfo -dfs where a
	// string is returned instead of a string array
	// if there are no connections
	//
	if ( `connectionInfo -isSource $srcPlug` ) {
		$dstPlugs = `connectionInfo -dfs $srcPlug`;
	}
	
	return $dstPlugs;
}


proc string feedbackMapDirtyAttr(
	string	$baseAttr
)
{
	return ($baseAttr + "MapDirty");
}


proc string feedbackSamplesDirtyAttr(
	string	$baseAttr
)
{
	return ($baseAttr + "SamplesDirty");
}

proc setMapFile(
	string	$mapPlug,
	string	$mapFile
)
{
	string	$tag = "setMapFile";

	HfTDebug($tag, "setting " + $mapPlug + " to " + $mapFile);
	setAttr -type "string" $mapPlug $mapFile;

	int		$mi = getMultiIndex( $mapPlug );

	if ( $mi >= 0 ) {
		string	$baseAttr = plugAttr( stripMultiIndex( $mapPlug ) );
		
		$baseAttr = baseFromHairMapsAttr( $baseAttr );

		if ( $baseAttr != "" ) {
			string	$hd = plugNode( $mapPlug );
			string	$mapUSamplesPlug = $hd + "." + hairMapUSamplesAttr($baseAttr) + "[" + $mi + "]";
			string	$mapVSamplesPlug = $hd + "." + hairMapVSamplesAttr($baseAttr) + "[" + $mi + "]";

			HfTDebug($tag, "zeroing " + $mapUSamplesPlug + " & " + $mapVSamplesPlug);
			setAttr $mapUSamplesPlug 0;
			setAttr $mapVSamplesPlug 0;

			// if a feedback node is connected to the map plug, clear the map
			// dirty flag
			//
			string	$connections[] = getDstPlugs( $mapPlug );
			string	$c;

			for ( $c in $connections ) {
				if ( `nodeType $c` == "FurFeedback" ) {
					string	$dirtyPlug = plugNode( $c ) + "." + feedbackMapDirtyAttr($baseAttr);

					HfTDebug( $tag, "clearing " + $dirtyPlug );
					setAttr $dirtyPlug 0;
					$dirtyPlug = plugNode( $c ) + "." + feedbackSamplesDirtyAttr($baseAttr);
					HfTDebug( $tag, "clearing " + $dirtyPlug );
					setAttr $dirtyPlug 0;
				}
			}
		}
	}
}

//Upload geometry cache
proc CheckinCacheFile(string $project,string $destFolder)
{
	string $OCTV_PROJECTS = tolower(`getenv "OCTV_PROJECTS"`);

	string $done[];
	clear $done;

	//获取文件名2015.6.16
	string $fileName = `file -q -sn`;
	string $name=basename($fileName,".mb");

	string $cacheFiles[] = `ls -type "cacheFile"`;
	for ($cacheFile in $cacheFiles)
	{
		if (`referenceQuery -isNodeReferenced $cacheFile`)
		{
			continue;
		}
		string $source = `getAttr ($cacheFile+".cachePath")`;
		
		if ($source == "")
		{
			continue;
		}
		
		string $cacheShape[]=`listConnections -sh 1 -s 0 $cacheFile`;
		
		if(objectType($cacheShape[0])=="nCloth"){
			//nCloth缓存
			$source = `substitute "/$" $source ""`;
			string $fullPath = zwFullPath($source);
			if (`gmatch (tolower($fullPath)) (tolower($OCTV_PROJECTS + "/" + $project + "/Project/data/*"))` )
			{
				continue;
			}
			string $cacheFolder = basename($source,"");
			string $dest;
			$dest= `substitute "/scenes/animation/" $destFolder "/data/"` + "/colthCache/"+$name+"/"+ $cacheFolder;
			if (`filetest -d $dest`)
			{
				string $message = "已经上传过同名缓存nCloth，请谨慎确定是否覆盖之前目录\n\n点 Continue 会继续并覆盖之前的目录，点 Cancel 取消Checkin\n";
				string $result = `confirmDialog -message $message -button "Continue" -button "Cancel" -defaultButton "Cancel" -cancelButton "Cancel" -dismissString "Cancel"`;
				if ($result == "Cancel")
				{
					error "Checkin Abort!";
				}
			}
			print ("\n----nCloth-dest:" + $dest);
			zwSysFile "md" $dest "" 0;
			string $sysrs = `zwSysFile "fcopy" $source $dest 0`;
			//if($sysrs!=""){
			//	error $sysrs;	
			//}
			if(`filetest -d $dest`){

				evalEcho ("setAttr -type \"string\" \"" + $cacheFile + ".cachePath\" \"" + $dest + "\"");
			}

		}else if(objectType($cacheShape[0])=="hairSystem"){
			//hairSystem缓存
			$source = `substitute "/$" $source ""`;
			string $fullPath = zwFullPath($source);
			if (`gmatch (tolower($fullPath)) (tolower($OCTV_PROJECTS + "/" + $project + "/Project/data/*"))` )
			{
				continue;
			}
			string $cacheFolder = basename($source,"");
			string $dest;
			$dest= `substitute "/scenes/animation/" $destFolder "/data/"` + "/hiarCache/"+$name+"/"+ $cacheFolder;
			if (`filetest -d $dest`)
			{
				string $message = "已经上传过同名缓存hairSystem，请谨慎确定是否覆盖之前目录\n\n点 Continue 会继续并覆盖之前的目录，点 Cancel 取消Checkin\n";
				string $result = `confirmDialog -message $message -button "Continue" -button "Cancel" -defaultButton "Cancel" -cancelButton "Cancel" -dismissString "Cancel"`;
				if ($result == "Cancel")
				{
					error "Checkin Abort!";
				}
			}
			print ("\n----hair-dest:" + $dest);
			zwSysFile "md" $dest "" 0;
			string $sysrs = `zwSysFile "fcopy" $source $dest 0`;
			//if($sysrs!=""){
			//	error $sysrs;	
			//}
			if(`filetest -d $dest`){
				print $dest;
				print"\n";
				evalEcho ("setAttr -type \"string\" \"" + $cacheFile + ".cachePath\" \"" + $dest + "\"");
			}
			
		}else if(objectType($cacheShape[0])=="historySwitch"){
			//上传点缓存
			$source = `substitute "/$" $source ""`;
			string $fullPath = zwFullPath($source);
			if (`gmatch (tolower($fullPath)) (tolower($OCTV_PROJECTS + "/" + $project + "/Project/data/*"))` )
			{
				continue;
			}
	
			int $find = false;
			for ($folder in $done)
			{
				if ($folder == $source)
				{
					$find = true;
					break;
				}
			}
			if (!$find)
			{
				$done[size($done)] = $source;
			}
	
			string $cacheFolder = basename($source,"");
			if (!`gmatch (tolower($cacheFolder)) "ch*"`&&!`gmatch (tolower($cacheFolder)) "pr*"`)
				error ("Cache folder name: " + $cacheFolder + "不规范，必须为ch或pr开头");
			
			
			string $dest;
			if (`gmatch (tolower($destFolder)) "*scenes/animation*"`)
	
				//$dest= `substitute "/scenes/animation/" $destFolder "/data/"` + "/geoCache/" + $cacheFolder;
	
				//2015.6.16
				$dest= `substitute "/scenes/animation/" $destFolder "/data/"` + "/geoCache/"+$name+"/"+ $cacheFolder;
			else
			{
				string $idName = `match "ch[0-9]{6}[A-Za-z0-9]+" $destFolder`;
				$dest = $OCTV_PROJECTS + "/" + $project + "/Project/data/action/" + $idName + "/" + $cacheFolder;
			}
	
			if (`filetest -d $dest`)
			{
				string $message = "已经上传过同名缓存cache，请谨慎确定是否覆盖之前目录\n\n点 Continue 会继续并覆盖之前的目录，点 Cancel 取消Checkin\n";
				string $result = `confirmDialog -message $message -button "Continue" -button "Cancel" -defaultButton "Cancel" -cancelButton "Cancel" -dismissString "Cancel"`;
				if ($result == "Cancel")
				{
					error "Checkin Abort!";
				}
			}
	
	
	
			print ("\n----cache-dest:" + $dest);
			if (!$find)
			{
				print ("\n-----$source:" + $source);
				print ("\n-----$dest:" + $dest);
	
				zwSysFile "md" $dest "" 0;
	
				string $sysrs = `zwSysFile "fcopy" $source $dest 0`;
				//if ($sysrs != "")
				//	error $sysrs;
			}
			if (`filetest -d $dest`)
			{
				evalEcho ("setAttr -type \"string\" \"" + $cacheFile + ".cachePath\" \"" + $dest + "\"");
			}
			
		}
		
	}
}

//Yeti缓存上传
proc zwCheckCopyYetiCache(string $destFolder,string $project){
	string $fileName = `file -q -sn`;
	string $name=basename($fileName,".mb");
	string $OCTV_PROJECTS = tolower(`getenv "OCTV_PROJECTS"`);
	string $YetiMayas[]=`ls -type "pgYetiMaya"`;
	for($YetiMaya in $YetiMayas){
		if(`getAttr ($YetiMaya+".fileMode")`!=1){
			continue;
		}
		string $source=`getAttr($YetiMaya+".cacheFileName")`;
		print("Yeti缓存"+$source+"\n");
		string $cacheFileName= basename($source,"");
		string $source=dirname($source);
		string $fullPath = zwFullPath($source);
		if (`gmatch (tolower($fullPath)) (tolower($OCTV_PROJECTS + "/" + $project + "/Project/data/*"))` )
		{
			continue;
		} 
		string $cacheFolder = basename($source,"");
		string $dest= `substitute "/scenes/animation/" $destFolder "/cache/"` + "/yetiCache/"+$name+"/"+ $cacheFolder;
		if (`filetest -d $dest`)
		{
			string $message = "已经上传过同名缓存YetiCahe，请谨慎确定是否覆盖之前目录\n\n点 Continue 会继续并覆盖之前的目录，点 Cancel 取消Checkin\n";
			string $result = `confirmDialog -message $message -button "Continue" -button "Cancel" -defaultButton "Cancel" -cancelButton "Cancel" -dismissString "Cancel"`;
			if ($result == "Cancel")
			{
				error "Checkin Abort!";
			}
		}
		print ("\n----nCloth-dest:" + $dest);
		zwSysFile "md" $dest "" 0;
		string $sysrs = `zwSysFile "fcopy" $source $dest 0`;
		if($sysrs!=""){
			error $sysrs;	
		}
		if(`filetest -d $dest`){
			print $dest;
			print "\n";
			evalEcho ("setAttr -type \"string\" \""+$YetiMaya+".cacheFileName\" \""+$dest+"/"+$cacheFileName+"\"");
		}
	}
}


// checkin callback，用于文件检查、优化
global proc octvCheckinCleanup(string $args[])
{
	eval "source zwCopyTextureImage.mel";
	eval "source zwSysFile.mel";
	eval "source zwNamespace.mel";

	string $project;		// 项目
	string $filename;		// 上传后的文件名
	string $destFolder;		// 上传目录
	int $copyMaps;			// 是否上传本机贴图
	int $copyCache;			// 是否上传hair cache, particle cache
	int $optimizeImagePlane;	// 是否删除所有imagePlane
	int $progress;			// 进度
	int $optimize = true;		// Optimize Scene Size
	string $mode = "";
	string $asset_type = "";

	$project		= $args[0];
	$filename		= $args[1];
	$destFolder		= $args[2];
	$copyMaps		= $args[3];
	$copyCache		= $args[4];
	$optimizeImagePlane	= $args[5];
	$progress		= $args[6];
	$optimize		= $args[7];
	$mode			= $args[8];
	$destMapFolder		= $args[9];
	$asset_type		= $args[10];
	$attached		= $args[11];
	$desc			= `strip $args[12]`;
	
// add by zhangben  20190305  check file name use chinese character
    string $chines = match("[^\u4e00-\u9faf]+",$filename);
    if (size($chines) >0){
        error("文件名有中文字符，请检查");
    }
	string $fileExt = fileExtension($filename);
	
	//判断是否有"D:/octvTemp"目录，无就创建此目录
	string $tempDir = "D:/octvTemp";
	if (!`filetest -d $tempDir`)
		sysFile -makeDir $tempDir;

	string $version = `about -version`;
	$version = `match "[0-9]+(\.[0-9]){0,1}" $version`;

	//连接后缀名相同的置换贴图
	if($asset_type !=""){
		if ($asset_type == "sets" || $asset_type == "props"){
			string $allDisplacementShader[]=`ls -type "displacementShader"`;
			if(size($allDisplacementShader)>0){
				confirmDialog -title "置换贴图" -message "场景和道具中存在置换节点！";
				error("场景和道具中存在置换节点！");
			}
		}else{
			string $allDisplacementShader[]=`ls -type "displacementShader"`;
			for($displacement in $allDisplacementShader){
				string $buffer[];
				int $num = `tokenize $displacement "_" $buffer`;
				if($num>1 && `match "^disSG" $buffer[$num-1]`!=""){
					string $allShadingEngine[]=`ls -type "shadingEngine"`;
					for($shadings in $allShadingEngine){
						string $buf[];
						int $numken = `tokenize $shadings "_" $buf`;		
						if ($buffer[$num-1]==$buf[$numken-1]){
							string $cons[]=`listConnections -s off -d on ($displacement+".displacement")`;
						    if(size($cons)<1 && $cons[0]!=$shadings){
							    connectAttr($displacement+".displacement",$shadings+".displacementShader");
							}
						}
					}				
				}
			}	
		}
	}
	
	string $buf[];
	clear $buf;

//警告有同名的物体
	check_same_name();
//警告有多余的显示层
	check_Display();

// 检查 - 前期

	if ($asset_type != "")
	{
		// 检查是否存在点、面数为零的mesh 物体
		string $error = `tazz_CheckEmptyMesh`;
		if ($error != "")
			error ("发现空的mesh 物体：\n" + $error);
	}

// 检查 - 动画

	// 只能参考master 文件，不能参考rigging 文件
	zwCheckinCheckReferenceRigging;
	zwCheckinCheckTextureCompareMaster;
	if ($mode == "anim" || $mode == "layout")	
	{
		zwCheckinCheckAnimReference;		// 只能参考master/al 文件
		zwCheckTopReference;			// 不能嵌套参考
		//CheckStandardNamespace;			// 检查namespace
	}

	// 检查cache
	if (($mode == "simulation" || $mode == "effect") || $mode == "render")
	{
		//zwCheckinCheckCache $filename $project;
	}

// 检查 - 项目
	// 检查时间条
	if ($project == "xx" && $mode == "anim")
	{
		zwCheckinCheckTimeLine;
	}

// 优化
	// 将所有hairSystem 的simulationMethod 设为static
	if ($mode == "texture" ||  $mode == "rigging")
	{
		zwSetIntAttrAll "hairSystem" "simulationMethod" 1;
	}


	// 前期文件去除namespace
	if ($asset_type != "")
	{
		zjRemoveNamespace;
	}

	//string $allDisplacement[]=`ls -type "displacementShader"`;
	//if(size($allDisplacement)>0){
		//confirmDialog -title "displacementShader" -message ("文件中存在置换节点(displacementShader),请清除置换节点！");
		//error("文件中存在置换节点(displacementShader),请清除文件中所有的置换节点！");
	//}

// 优化 - 动画
	// 删除渲染层	
	//if ($mode == "anim" || $mode == "simulation" )
	if ($mode == "anim" || $mode == "simulation" || $mode =="master" || $mode =="model")
	{
		zwCheckinDelRenderLayer;
	}

	// nCloth.isDynamic -> false; nucleus.enable -> false
	if ($mode == "anim" || $mode == "cache" || $mode == "simulation")
	{
		zwSetIntAttrAll "nCloth" "isDynamic" false;
		zwSetIntAttrAll "nucleus" "enable" false;
	}

	// file -lockFile false
	if ($asset_type == "sets" || $asset_type == "props")
	{
	//	eval "file -lockFile false";
	}


// 不能有指向本机的Reference
	string $scenes = zwGetPath("scenes", "");
	string $pattern = `substitute "/scenes$" $scenes "/*"`;
	string $Shpattern = `substitute ("/" + $project + "/") $pattern ("/" + "SHARED" + "/")`;	//each project can reference content form shared project

//2016.4.5新添加了一个群众通用元素作为参考
	string $Gepattern=`substitute ("/" + $project + "/") $pattern ("/" + "GENERAL" + "/")`;

	$pattern = tolower($pattern);
	$Shpattern = tolower($Shpattern);

	$Gepattern=tolower($Gepattern);

	$buf = `file -query -reference`;
	for ($file in $buf)
	{
		string $str = $file;
		$str = `substituteAllString $str "\\" "/"`;
		$str = tolower($str);
		if (!(`gmatch $str $pattern`||`gmatch $str $Shpattern`||`gmatch $str $Gepattern`))
		{
			error ("只能参考" + $scenes + "或者"+ $Shpattern + "或者"+ $Gepattern + "里面的文件\n" + $file);
		}
	}


	setAttr -lock false defaultRenderGlobals.byFrameStep;
	setAttr defaultRenderGlobals.byFrameStep 1;

	//删除"D:/octvTemp"目录下的当前文件名
	string $temp = $tempDir + "/" + $filename;
	sysFile -delete $temp;
	file -rename $temp;


	if ($optimizeImagePlane)	// 删imagePlane
	{
		$buf = `ls -type "imagePlane"`;
		for ($imagePlane in $buf)
		{
			if (!`reference -isNodeReferenced $imagePlane`)
			{
				lockNode -lock false $imagePlane;	// 文件有时候节点被锁了
				delete $imagePlane;
			}
		}
	}

	if ($optimize)
	{
		cleanUpScene 0;
	}

	//检查没有赋材质的物体
	checkingNoAnyMat();
	if ($copyMaps)
	{
		print ("\nproject:" + $project);
		print ("\nmode:" + $mode);
		print ("\ndestFolder:" + $destFolder);
		print ("\nprogress:" + $progress);

		//
		//检查贴图的大小与格式
		string $files[] = `ls -type "file"`;
		int $i=0;
		int $flag=0;
		string $info="";
		string $infos="";
		string $checkMaps[];
		clear $checkMaps;
		for ($file in $files)
		{
			string $fileTextureName = `getAttr ($file + ".fileTextureName")`;
			int $flags=0;
			for($map in $checkMaps){
				if($map==$fileTextureName){
					$flags=1;
					break;
				}
			}
			if($flags==1){
				continue;
			}
			if(`filetest -f $fileTextureName`){
				float $ImageoutSizeX=`getAttr ($file+".outSizeX")`;
				float $ImageoutSizeY=`getAttr ($file+".outSizeY")`;
				if($ImageoutSizeX>4096 || $ImageoutSizeY>4096){
					$i=$i+1;
					$info=$info+$fileTextureName+"\n";
				}

				string $ext=`fileExtension($fileTextureName)`;	
				if($ext!="JPG" && $ext!="jpg" && $ext!="jpeg" && $ext!="JPEG" && $ext!="HDR" && $ext!="hdr" && $ext!="TX" && $ext!="tx" && $ext!="PNG" && $ext!="png" ){
					$flag=1;	
					$infos=$infos+$fileTextureName+"\n";
				}
			}
			$checkMaps[size($checkMaps)]=$fileTextureName;
		}
		if($i>4){
			//string $renname=`getenv username`;
			//if($renname!="liangb"){
				confirmDialog -title "贴图分辨率" -message ($info+"超过四张贴图的分辨率大于4096");
				error ($info+"贴图的分辨率大于4096");
			//}
		}
		if($flag>0){
			confirmDialog -title "贴图格式" -message ($infos+"贴图格式不正确,正确的格式(JPG,HDR,TX,PNG)");
			error($infos+"贴图格式不正确,正确的格式(JPG,HDR,TX,PNG)");
		}


		//检查arnold代理与非代理文件
		if($mode=="cache" || $mode=="anim"){

		}else{
			zwCheckArnoldTx();
		}
		
		//
		zwCheckinCopyTextureImage($project, $mode, $destFolder, $progress);
	}


	// furAttrMap
	if ($mode == "dynamic" && `pluginInfo -query -loaded "Fur.mll"`)
	{
		zwCheckinFurAttrMap($destFolder);
	}

	//cleanup static hair
	if (($mode == "simulation" || $mode == "dynamic"))
	{
		zwCheckinStaticHair;
	}


// upload cache
	if ($copyCache)
	{
		CheckinCacheFile($project,$destFolder);
		if(`pluginInfo -query -loaded "pgYetiMaya"`){
			print "\n上传yeti缓存\n";
			zwCheckCopyYetiCache($destFolder,$project);
		}	
	}



// 删除所有ViewSelectedSet
	if (!`about -batch`)
	{
		$buf = `getPanel -type "modelPanel"`;
		for ($modelPanel in $buf)
		{
			isolateSelect -state false $modelPanel;
		}
	}

// 线框显示
	$buf = `getPanel -type "modelPanel"`;
	for($panel in $buf)
		modelEditor -edit -displayAppearance "wireframe" -displayLights "default" $panel;


//checkin tx\ms的时候自动运行"diable all BOTs"
	if ($mode == "texture" || $mode == "master")
	{
		zwSetIntAttrAll "file" "useCache" false;
		//delete all diskcache
		$buf = `ls -type "diskCache"`;
		if (size($buf) > 0)
		{
			delete $buf;
		}

		if (`pluginInfo -query -loaded "Mayatomr"`)
		{
			zjRemoveMRsda;
		}
	}

//checkin *hair*_dy的时候，自动运行“动３”
	if ($mode == "simulation" && `match "hair" (tolower($filename))` != "")
	{
		zwSetIntAttrAll "hairSystem" "simulationMethod" 3;
	}
	

	if ($copyMaps)
	{
		string $files[] = `ls -type "file"`;
		for ($file in $files)
		{
			if (`reference -isNodeReferenced $file`)
			{
				continue;
			}

			string $fileTextureName = `getAttr ($file + ".fileTextureName")`;

			//	string $texname = `match "[^/\\]+$" $fileTextureName`;
			//	$upPath = "${OCTV_PROJECTS}/" + $project + "/Project/sourceimages/" + $asset_type + "/" + $idName + "/" + $texname;
			//	$upPath = `substitute "/[^/]+$" $str ""` + "/" + $texname;
			//	$upPath = `substitute "//octvision.com/CG/Themes" $destMapFolder "${OCTV_PROJECTS}"` + "/" + $texname;
			string $upPath = `substitute "//octvision.com/CG/Themes" $fileTextureName "${OCTV_PROJECTS}"`;

			if ($fileTextureName != $upPath)
			{
				setAttr ($file + ".fileTextureName") -type "string" $upPath;
			}
		}

	}

// save a temp file for uploading
	
	int $rs = catch(`file -force -prompt false -save -uiConfiguration false`);
	if ($rs)
	{
		sysFile -delete $temp;
		error "不能保存文件，请检查是否D：盘空间不足";
	}
	
	print ("\nasset_type:" + $asset_type);
	int $tdTest = `getenv "OCTV_TDTEST"`;
	if ( $tdTest!= 0)
	{
		error ("测试，文件已经另存为：" + $temp);
	}

//Upload attached file and maya file
	string $bakfList[] = `getFileList -folder ($destFolder + "/" + "Backups/")`;
	string $newFile = `file -q -sn`;
	string $onlyfilename = basename($newFile, "");
	string $headName = `match "[^.]+" $onlyfilename`;
	

	print ("\nnewFile:" + $newFile);
	print ("\ndestFile:" + $destFolder);

	int $flagCam=false;
	string $sysrs = "";
	string $bakname = "";

	//动画自动导出摄像机组
	//相机目标路径
	string $camFolder="";
	string $camName="";
	if($mode=="anim"){
		int $rs=true;
		string $message="是否单独导出相机文件上传？\n\n点Ignore忽略继续,点OK上传相机文件";
		string $result = `confirmDialog -message $message -button "Ignore" -button "OK" -defaultButton "OK" -cancelButton "Ignore" -dismissString "Ignore"`;
		
		if($result=="OK"){
			//string $newFile = `file -q -sn`;
			//string $onlyfilename = basename($newFile, "");//文件名
			string $buf[];
			clear $buf;
			tokenize $onlyfilename "_." $buf;

			string $allObj[]=`listCameras -p`;//查找相机
			string $importCam="";
			string $OCTV_PROJECTS = `getenv "OCTV_PROJECTS"`;
			int $flag=false;
			for($i=0;$i<size($allObj);$i++){
			    string $allCam[]=`listRelatives -p $allObj[$i]`;//相机上一级的目录
			    string $buffer[];
			    for($j=0;$j<size($allCam);$j++){
			        tokenize $allCam[$j] "_" $buffer;
			        if((size($buffer)>=4 && size($buffer)<=6) && (`match "_cam" $allCam[$j]` != "")){
			            string $sceneNum=$buffer[1];  
						string $shotNum=$buffer[2];
						if($buffer[0]==$buf[0] && $sceneNum==$buf[1] && $shotNum==$buf[2]){
						   $flag=true;
						   select -d;
						   select -r $allCam[$j];
						   $camName=$allCam[$j];
						   

						   $camFolder = $OCTV_PROJECTS + "/" + $buffer[0] + "/Project/scenes/animation/"+ $sceneNum + "/" + $shotNum+"/camera";

						   string $fList[] = `getFileList -folder ($camFolder + "/") -filespec ($allCam[$j] + "*")`;

						   if (size($fList))
							{
								string $fLists[];
								clear $fLists;
								for($f in $fList){
			    					string $lists=tolower($f);
			    					$fLists[size($fLists)]=$lists;
								}

								string $sortVerhis[] = `sort $fLists`;
								string $lastVerfile = "";
								if (size($sortVerhis))
									$lastVerfile = $sortVerhis[size($sortVerhis)-1];

								print ("\nlastVerf:" + $lastVerfile);
								string $cver = `match "_c[0-9]{3}." $lastVerfile`;
								int $newver = int(`substring $cver 3 5`) + 1;
								
								int $padding = 3;
								string $newNum = `python ("'%0" + $padding + "d' % " + $newver)`;
								 $camName =  $camName + "_c" + $newNum + ".ma";
							}
							else
								 $camName =  $camName + "_c001.ma";

						   string $camPath = `substitute $onlyfilename $newFile $camName`;

						   file -force -options "v=0;" -typ "mayaAscii" -pr -es  $camPath; 
						   for($objsCam in $allObj){
						    	lockNode -lock off $objsCam;
						   }
						   delete $allCam[0];
						   int $rs = catch(`file -force -prompt false -save -uiConfiguration false`);
							if ($rs)
							{
								sysFile -delete $temp;
								error "不能保存文件，请检查是否D：盘空间不足";
							}
						   
						   $sysrs = `zwSysFile "copy" ($camPath) $camFolder  0`;
						   $flagCam=true;
						   break; 
					    }
			        }else{
			            continue;
			        }

			    }
			    if($flag){
			        break;
			    }
			    while(size($allCam)>0){
			        $allCam=`listRelatives -p $allCam[0]`;
			        tokenize $allCam[0] "_" $buffer;
			        
			        if((size($buffer)>=4 && size($buffer)<=6) && (`match "_cam" $allCam[0]` != "")){
			            print ("\nallCam:" + $allCam[0]);
			            string $sceneNum=$buffer[1];  
						string $shotNum=$buffer[2];
						if($buffer[0]==$buf[0] && $sceneNum==$buf[1] && $shotNum==$buf[2]){
						   $flag=true;
						   
						   select -d;
						   select -r $allCam[0];
						   $camName=$allCam[0];

						   $camFolder = $OCTV_PROJECTS + "/" + $buffer[0] + "/Project/scenes/animation/"+ $sceneNum + "/" + $shotNum+"/camera";

						   string $fList[] = `getFileList -folder ($camFolder + "/") -filespec ($allCam[$j] + "*")`;

						   if (size($fList))
							{
								string $fLists[];
								clear $fLists;
								for($f in $fList){
			    					string $lists=tolower($f);
			    					$fLists[size($fLists)]=$lists;
								}

								string $sortVerhis[] = `sort $fLists`;
								string $lastVerfile = "";
								if (size($sortVerhis))
									$lastVerfile = $sortVerhis[size($sortVerhis)-1];

								print ("\nlastVerf:" + $lastVerfile);
								string $cver = `match "_c[0-9]{3}." $lastVerfile`;
								int $newver = int(`substring $cver 3 5`) + 1;
								
								int $padding = 3;
								string $newNum = `python ("'%0" + $padding + "d' % " + $newver)`;
								 $camName =  $camName + "_c" + $newNum + ".ma";
							}
							else
								 $camName =  $camName + "_c001.ma";

							string $camPath = `substitute $onlyfilename $newFile $camName`;

						    file -force -options "v=0;" -typ "mayaAscii" -pr -es  $camPath; 
						    for($objsCam in $allObj){
						    	lockNode -lock off $objsCam;
						    }
						    delete $allCam[0];
							int $rs = catch(`file -force -prompt false -save -uiConfiguration false`);
							if ($rs)
							{
								sysFile -delete $temp;
								error "不能保存文件，请检查是否D：盘空间不足";
							}
							$sysrs = `zwSysFile "copy" ($camPath) $camFolder  0`;
							$flagCam=true;
						    break;  
					    }
			        }
			    }
			    if($flag){
			        break;
			    }
			}
			if(!$flag){
			        error "场景中的相机组命名错误，正确的名字格式为：项目名_场景号_镜头号_相机，例如 PROJ_sc10_sh02_cam";
			}

		}
	}


	if ($asset_type == "characters" || $asset_type == "props" || $asset_type == "sets" || $asset_type == "cameras")	//Asset and cameras
	{
		string $verhis[];
		clear $verhis;
		for ($item in $bakfList)
		{
			if (`filetest -d ($destFolder + "/" + "Backups/" + $item)` && `gmatch $item ($headName + "*")`) 
			{
				$verhis[size($verhis)] = $item;
			}
		}
		
		string $sortVerhis[] = `sort $verhis`;
		string $lastVerfile = "";
		if (size($sortVerhis))
			$lastVerfile = $sortVerhis[size($sortVerhis)-1];

		print ("\nlastVerfile:" + $lastVerfile);
		string $cver = `match "_c[0-9]{3}$" $lastVerfile`;
		int $onlyver = int(`substring $cver 3 5`);


		int $padding = 3;
		string $newNum = `python ("'%0" + $padding + "d' % " + ($onlyver + 1))`;
		$bakname = $headName + "_c" + $newNum;

		for ($i =1; $i<($onlyver-1); $i++)
		{
			string $hisNum = `python ("'%0" + $padding + "d' % " + $i)`;
			string $hisname = $headName + "_c" + $hisNum;
			$sysrs = `zwSysFile "rd" ($destFolder + "/" + "Backups/" + $hisname) "" 0`;   //建一个文件夹
		}


		$sysrs = `zwSysFile "fcopy" $newFile ($destFolder + "/" + "Backups/" + $bakname) 0`;  //拷贝到文件夹下面
	}
	else
	{
		$bakfList = `getFileList -folder ($destFolder + "/")`; 
		$headName = `substring $headName 1 (size($headName)-5)`;
		print ("\n--------------headename:" + $headName);


		string $verhis[];
		clear $verhis;
		for ($item in $bakfList)
		{
			print ("\nitem:" + $destFolder + "/"+ $item);
			print ("\nheadName:" + $headName);
			if (`filetest -f ($destFolder + "/" + $item)` && `gmatch $item ($headName + "*")`) 
			{
				$verhis[size($verhis)] = $item;
			}
		}
		
		string $sortVerhis[] = `sort $verhis`;
		string $lastVerfile = "";
		if (size($sortVerhis))
			$lastVerfile = $sortVerhis[size($sortVerhis)-1];

		print ("\nlastVerfile:" + $lastVerfile);
		string $cver = `match "_c[0-9]{3}." $lastVerfile`;
		int $onlyver = int(`substring $cver 3 5`);

		int $padding = 3;
		string $newNum = `python ("'%0" + $padding + "d' % " + ($onlyver + 1))`;
		$bakname = $headName + "_c" + $newNum;

		for ($i =1; $i<($onlyver-1); $i++)
		{
			string $hisNum = `python ("'%0" + $padding + "d' % " + $i)`;
			string $hisname = $headName + "_c" + $hisNum;
			$sysrs = `zwSysFile "del" ($destFolder + "/" + $hisname + "." + $fileExt) "" 0`;  //删除原来的文件重命名文件名
		}

	}

	//2016.2.29上传效果图片
	if  ($attached != "")
	{
		string $attachedExt = fileExtension($attached);
		string $attachedName;
		if ($asset_type != "")
		{
			
			$attachedName = $headName + "." + $attachedExt;
			//$sysrs = `zwSysFile "copy" $attached ($destFolder + "/" + "Backups/" + $bakname + "/" + $attachedName) 0`;
			$sysrs = `zwSysFile "copy" $attached ($destFolder + "/" + $attachedName) 0`;

			string $db = "dbo.filesystem_upload";
			string $fpath=$destFolder + "/" + $attachedName;

			string $buf[];
			clear $buf;

			tokenize $attachedName "_." $buf;
			
			python("import octvDB");
			python("octvDB.delTextureDB('" + $db + "','" +$attachedName + "')"); 	
			python("octvDB.insertAssertDB('" + $db + "','" + $attachedName + "','" + $fpath + "','" + $project + "','" + $buf[1] + "','" + 0 + "','" + $asset_type + "','" + $mode + "')");
		
		}
		else
		{
			$attachedName = $headName + "." + $attachedExt;
			$sysrs = `zwSysFile "copy" $attached ($destFolder + "/" + $attachedName) 0`;

			string $db = "dbo.filesystem_upload";

			string $fpath=$destFolder + "/" + $attachedName;

			string $buf[];
			clear $buf;
			tokenize $attachedName "_." $buf;
			print "kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk\n";
			print $buf[1];
			print"\n";
			print $buf[2];
			python("import octvDB");

			string $anim="animation";
			python("octvDB.delTextureDB('" + $db + "','" +$attachedName + "')"); 		
			python("octvDB.insertAnimationDB('" + $db + "','" + $attachedName + "','" + $fpath + "','" + $project + "','" + $buf[1] + "','" + $buf[2] + "','" + 1 + "','" + $anim + "','" + $mode + "')");
		}
	}
	
	$sysrs = `zwSysFile "fcopy" $newFile $destFolder 0`;  //拷贝一个新的文件在目录下

	/*string $msFolder = "";
	string $msAnim = "";
	if ($mode == "rigging")
	{
		$msFolder = `substitute "/rigging" $destFolder "/master"`;
		//2015.12.11
		if(`match "_dy_" $onlyfilename`!="" ){
			$msAnim = `substitute "_dy_rg" $onlyfilename "_h_dy_msAnim"`;

		}else if(`match "_mc_" $onlyfilename`!=""){
			$msAnim = `substitute "_mc_rg" $onlyfilename "_h_mc_msAnim"`;
		
		}else{
			$msAnim = `substitute "_rg" $onlyfilename "_msAnim"`;
		}

		$sysrs = `zwSysFile "copy" $newFile ($msFolder + "/" + $msAnim) 0`;
	}*/


	//2015.12.11
	//上传文件场景文件直接生成msTex文件
	string $msTex="";
	string $msTexFolder="";
	if($mode=="texture" && $asset_type == "sets"){
		$msTexFolder=`substitute "/texture" $destFolder "/master"`;
		
		$msTex=`substitute "_tx" $onlyfilename "_msTex"`;
		$sysrs=`zwSysFile "copy" $newFile ($msTexFolder + "/" + $msTex) 0`;
	}


	//2015.12.10
	//备份一份只有lambert材质的文件在master文件夹中给动画组做动画,msNoTex

	string $TexFolder="";
	string $msNoTex="";
	
	if(($mode=="master" && `match "_h_msAnim" $onlyfilename`!="")|| ($mode=="texture" && $asset_type == "sets" && `match "_h_tx" $onlyfilename`!="")){
		if($mode=="master"){
			$msNoTex =  `substitute "_h_msAnim" $onlyfilename "_h_msNoTex"`;

		}else if($mode=="texture" && $asset_type == "sets"){
			$msNoTex =  `substitute "_h_tx" $onlyfilename "_h_msNoTex"`;
			
		}
		string $msNoTexFileName="D:/octvTemp/"+$msNoTex ;
		sysFile -delete $msNoTexFileName;
		file -rename $msNoTexFileName;
		
		string $allShading[]=`ls -type shadingEngine`;
		for($i in $allShading){
			if($i!="initialParticleSE" && $i!="initialShadingGroup"){
				catch(`delete $i`);
			}	
		}
		hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");
		
		string $lambert=`shadingNode -asShader lambert`;
		string $lambertSG=`sets -renderable true -noSurfaceShader true -empty -name ($lambert+"SG")`;
		connectAttr -f ($lambert+".outColor") ($lambertSG+".surfaceShader");
		select -allDagObjects;
		sets -e -forceElement $lambertSG;
		
		int $rss = catch(`file -force -prompt false -save -uiConfiguration false`);
		if ($rss)
		{
			sysFile -delete $msNoTexFileName;
			error "不能保存文件，请检查是否D：盘空间不足";
		}
		if($mode=="master"){
			$TexFolder=$destFolder;

		}else if($mode=="texture" && $asset_type == "sets"){

			$TexFolder=`substitute "/texture" $destFolder "/master"`;
		}
		
		//print $TexFolder;
		print $msNoTex;

		$sysrs = `zwSysFile "copy" $msNoTexFileName ($TexFolder + "/" + $msNoTex) 0`;
	}





//record for database
	string $upUser = `getenv username`;
	if ($asset_type == "characters" || $asset_type == "props" || $asset_type == "sets")	//Asset
	{
		string $db = "asset";
		string $fstate = "0";
		string $ftype = "1";
		string $fpath = ($destFolder + "/" + $filename);
		string $checkState = "1";
		string $checkUser = "";
		
		switch($mode)
		{
			case "model":
				$ftype = "1";
				break;
			case "morph":
				$ftype = "2";
				break;
			case "rigging":
				$ftype = "3";
				break;
			case "dynamic":
				$ftype = "4";
				break;
			case "texture":
				$ftype = "5";
				break;
			case "action":
				$ftype = "6";
				break;
			case "lighting":
				$ftype = "8";
				break;
			case "master":
				$ftype = "7";
				break;
		}

		python("import octvDB");
		
		python("octvDB.delDB('" + $db + "','" + $filename + "')");
		print ("\nlastVerfile:" + $desc);
		python("octvDB.insertDB('" + $db + "','" + $filename + "','" + $fstate + "','" + $ftype + "','" + $upUser + "','" + $fpath + "','" + $checkState + "','" + $checkUser  + "','" + $desc + "')");
		$fstate = 1;
		python("octvDB.insertDB('" + $db + "','" + $bakname + "','" + $fstate + "','" + $ftype + "','" + $upUser + "','" + $fpath + "','" + $checkState + "','" + $checkUser  + "','" + $desc + "')");

		/*if ($mode == "rigging")
		{
			$fstate = "0";
			$fpath = ($msFolder + "/" + $msAnim);

			python("octvDB.delDB('" + $db + "','" + $msAnim + "')");
			$ftype = "7";
			python("octvDB.insertDB('" + $db + "','" + $msAnim + "','" + $fstate + "','" + $ftype + "','" + $upUser + "','" + $fpath + "','" + $checkState + "','" + $checkUser  + "','" + $desc + "')");
			
		}*/
		//2015.12.11
		//上传文件场景文件直接生成msTex文件
		if($mode=="texture" && $asset_type == "sets"){
			$fstate = "0";
			$fpath = ($msTexFolder + "/" + $msTex);

			python("octvDB.delDB('" + $db + "','" + $msTex + "')");
			$ftype = "7";
			python("octvDB.insertDB('" + $db + "','" + $msTex + "','" + $fstate + "','" + $ftype + "','" + $upUser + "','" + $fpath + "','" + $checkState + "','" + $checkUser  + "','" + $desc + "')");

		}

		//2015.12.10
		//备份一份只有lambert材质的文件在master文件夹中给动画组做动画,msNoTex
		if(($mode=="master" && `match "_h_msAnim" $onlyfilename`!="")|| ($mode=="texture" && $asset_type == "sets" && `match "_h_tx" $onlyfilename`!="")){
			$fstate = "0";
			$fpath = ($TexFolder + "/" + $msNoTex);

			python("octvDB.delDB('" + $db + "','" + $msNoTex + "')");
			$ftype = "7";
			python("octvDB.insertDB('" + $db + "','" + $msNoTex + "','" + $fstate + "','" + $ftype + "','" + $upUser + "','" + $fpath + "','" + $checkState + "','" + $checkUser  + "','" + $desc + "')");
		}

		//if($project == "JMWC"){
			string $upUser = `getenv username`;
			string $dbreturn[] = `python("octvDB.queryCheckUserDB('" + $db + "','" + $filename +"')")`;
			string $checkUser = $dbreturn[0];
			if($checkUser==$upUser && strip($checkUser)!= ""){
	    		python("octvDB.setCheckUserUNLLDB('" + $db + "','" + $filename + "')");
			}
		//}

	}
	else
	{
		string $db = "animation";
		string $fstate = "0";
		string $ftype = "1";
		string $fpath = ($destFolder + "/" + $filename);
		string $checkState = "1";
		string $checkUser = "";

		switch($mode)
		{
			case "layout":
				$ftype = "5";
				break;
			case "anim":
				$ftype = "0";
				break;
			case "camera":
				if($asset_type=="cameras"){
					$ftype = "2";  //总相机类型
				}else{
					$ftype = "11"; //动画相机类型
				}			
				break;
			case "cache":
				$ftype = "1";
				break;
			case "crowd":
				$ftype = "3";
				break;
			case "simulation":
				$ftype = "7";
				break;
			case "effect":
				$ftype = "4";
				break;
			case "render":
				$ftype = "6";
				break;
			case "lighting":
				$ftype = "9";
				break;
		}

		python("import octvDB");
		
		python("octvDB.insertDB('" + $db + "','" + $filename + "','" + $fstate + "','" + $ftype + "','" + $upUser + "','" + $fpath + "','" + $checkState + "','" + $checkUser  + "','" + $desc + "')");

		if ($mode == "anim" && $flagCam==true)
		{
			$fstate = "0";
			$fpath = ($camFolder + "/" + $camName);

			//python("octvDB.delDB('" + $db + "','" + $camName + "')");
			$ftype = "11";
			python("octvDB.insertDB('" + $db + "','" + $camName + "','" + $fstate + "','" + $ftype + "','" + $upUser + "','" + $fpath + "','" + $checkState + "','" + $checkUser  + "','" + $desc + "')");
		}
		//if($project == "JMWC"){
			string $upUser = `getenv username`;
			string $bufer[];
			string $fileNames="";
			int $i=`tokenize $filename "_." $bufer`;
			if(`match "c" $buf[$i-2]`!=""){
				string $cver = `match "_c[0-9]{3}." $filename`;
				int $newver = int(`substring $cver 3 5`) - 1;
				int $padding = 3;
				string $newNum = `python ("'%0" + $padding + "d' % " + $newver)`;

				for($j=0; $j<$i; $j++){
					if($fileNames==""){
						$fileNames=$bufer[$j];
					}else if($i-2==$j){
						$fileNames=$fileNames+"_c"+$newNum;
					}else if($i-1==$j){
						$fileNames=$fileNames+"."+$bufer[$j];
					}else{
						$fileNames=$fileNames+"_"+$bufer[$j];
					}
				}
			}
			string $dbreturn[] = `python("octvDB.queryCheckUserDB('" + $db + "','" + $fileNames +"')")`;
			string $checkUser = $dbreturn[0];
			if($checkUser==$upUser && strip($checkUser)!= ""){
	    		python("octvDB.setCheckUserUNLLDB('" + $db + "','" + $fileNames + "')");
			}
		//}

	}

	//inform relative group members
	string $newbuf[];
	clear $newbuf;

	tokenize $filename "_." $buf;
	string $prefName = $buf[0] + "_" + $buf[1];

	string $OCTV_TECH = `getenv "OCTV_TECH"`;	//OCTV Tech folder
	string $invokepath = $OCTV_TECH + "/bin/msg/";
	string $cmd = $invokepath + "cmdMsgPush.exe \"" + "sendFileSysNotice"  + "\" \""  +  $prefName + "\" \""  + "文件系统有新的文件上传了,文件名:" + $filename + "\"";
	print ("\n------*******---------" + $cmd + "\n");
	string $sysCmd = `system $cmd`;

}


global proc string zwCheckTextureImage(string $version, string $args[])
{
	string $err;

	string $nodeType	= $args[0];	// 节点类型，例如：file、brush、imagePlane
	string $attr		= $args[1];	// 节点属性，例如：fileTextureName、leafImage、flowerImage、imageName
	string $production	= $args[2];	// 网上工程文件夹，用于判断是网上文件还是本机文件
	string $project		= $args[3];	// 项目
	string $mode		= $args[4];	// 项目
	string $destFolder	= $args[5];

	string $nodes[] = `ls -type $nodeType`;
	for ($node in $nodes)
	{
		if ($node == "brush")
		{
			if ($attr == "imageName")
			{
				if (!(`getAttr ($node + ".mapColor")` && `getAttr ($node + ".textureType")` == 4))
				{
					continue;
				}
			}
			if ($attr == "leafImage")
			{
				if (!(`getAttr ($node + ".tubes")` && `getAttr ($node + ".leaves")` && !`getAttr ($node + ".leafUseBranchTex")`))
				{
					continue;
				}
			}
			if ($attr == "flowerImage")
			{
				if (!(`getAttr ($node + ".tubes")` && `getAttr ($node + ".flowers")` && !`getAttr ($node + ".flowerUseBranchTex")`))
				{
					continue;
				}
			}
		}

		string $file = `getAttr ($node + "." + $attr)`;
		if ($file == "")
		{
			continue;
		}

		$file = `workspace -expandName $file`;

		if (!`filetest -f $file`)
		{
			$err += "贴图丢失：" + $node + "." + $attr + "\t" + $file + "\n";
			continue;
		}
	}

	return $err;
}


global proc zwCheckinCopyTextureImage(string $project, string $mode, string $destFolder, int $progress)
{
	string $maps;
	if (`match "layout" $mode` != "" || `match "anim" $mode` != "" || `match "simulation" $mode` != "" || `match "crowd" $mode` != "" || `match "cache" $mode` != "" || `match "effect" $mode` != "" || `match "render" $mode` != "" )
	{
		$maps = `substitute "[^/]*$" $destFolder "maps"`;
	}
	else
	{
		$maps = `substitute "/[^/]*$" $destFolder ""`;
	}

	$maps = `substitute "/scenes/" $maps "/sourceimages/"`;
	print ("\nmaps:" + $maps);

	
	string $OCTV_PROJECTS = tolower(`getenv "OCTV_PROJECTS"`);

	string $production = `getenv "OCTV_PROJECTS"` + "/" + $project + "/Project";

	print ("\nproduction:" + $production);

	string $error = `zwCheckTextureImage 1 {"file", "fileTextureName", $production, $project, $mode, $destFolder}`;
	if (`pluginInfo -query -loaded "Mayatomr"`)
	{
		$error += `zwCheckTextureImage 1 {"mentalrayTexture", "fileTextureName", $production, $project, $mode, $destFolder}`;
		$error += `zwCheckTextureImage 1 {"mentalrayIblShape", "texture", $production, $project, $mode, $destFolder}`;
	}
	$error += `zwCheckTextureImage 1 {"imagePlane", "imageName", $production, $project, $mode, $destFolder}`;

	//yeti贴图的上传
	if(`pluginInfo -query -loaded "pgYetiMaya"`){
		print("\n yeti上传："+$destFolder+"\n");

		$error+=zwYetiCheckCopyTextureImage($destFolder);
	}

	if ($error != "")
	{
		if ($progress >= 100)
		{
			error $error;
		}
		else
		{
			warning $error;
		}
	}

	zwCopyTextureImage(3, {"file", "fileTextureName", $maps, "1", "1", $progress, $project, "0"});
	if (`pluginInfo -query -loaded "Mayatomr"`)
	{
		zwCopyTextureImage(3, {"mentalrayTexture", "fileTextureName", $maps, "1", "1", $progress, $project, "0"});
		zwCopyTextureImage(3, {"mentalrayIblShape", "texture", $maps, "1", "1", $progress, $project, "0"});
		zwCopyTextureImage(3, {"mib_ptex_lookup", "filename", $maps, "1", "1", $progress, $project, "0"});
		zwCopyTextureImage(2, {"", "", $maps, "1", "1", $progress, $project, "0"});
	}
	if (`pluginInfo -query -loaded "vrayformaya"`)
	{
		zwCopyTextureImage(3, {"VRayMesh", "fileName", $maps, "1", "1", $progress, $project, "0"});
		zwCopyTextureImage(3, {"VRayLightIESShape", "iesFile", $maps, "1", "1", $progress, $project, "0"});
		zwCopyTextureImage(4, {"", "", $maps, "1", "1", $progress, $project, "0"});
	}

	zwCopyTextureImage(3, {"imagePlane", "imageName", $maps, "1", "1", $progress, $project, "0"});
	zwCopyTextureImage(3, {"brush", "imageName", $maps, "1", "0", $progress, $project, "0"});
	zwCopyTextureImage(3, {"brush", "leafImage", $maps, "1", "0", $progress, $project, "0"});
	zwCopyTextureImage(3, {"brush", "flowerImage", $maps, "1", "0", $progress, $project, "0"});

	print ("\nfile texture done" );	
}

//Yeti的贴图
global proc string zwYetiCheckCopyTextureImage(string $destFolder){
	string $err;
	//yeti上传贴图的路径
	string $destMapsYeti = `substitute "[^/]*$" $destFolder "sourceimages/Yeti"`;
	$destMapsYeti=`substitute "/scenes/" $destMapsYeti "/sourceimages/"`;
	//print($mapsYeti+"\n");
	zwSysFile "md" $destMapsYeti "" 0;
	string $zwpgYetiMaya[]=`ls -type "pgYetiMaya"`;
	
	int $progress = 0;
	int $max = `size $zwpgYetiMaya`;
	if($max){
		progressWindow -progress $progress -max $max -title "Copy Yeti Maps" -status ($progress + "/" + $max) -isInterruptable true;
	}
	for($pgYeti in $zwpgYetiMaya){
		if (`progressWindow -query -isCancelled`)
		{
			progressWindow -endProgress;
			error "";
		}
		$progress ++;
		progressWindow -edit -progress $progress -status ($progress + "/" + $max + "\t" + $pgYeti);
		
		
		string $imageYetiPath=`getAttr ($pgYeti+".imageSearchPath")`;
		print $imageYetiPath;
		print "\n";
		string $buf[];
		clear $buf;
		tokenize $imageYetiPath "/\\" $buf;
		//print $buf;
		if($buf[0]=="sourceimages" && $buf[1]=="Yeti"){
			string $workPath=`workspace -q -fullName`+"/"+$imageYetiPath;
			$workPath=`substituteAllString $workPath "\\" "/"`;
			string $fList[] = `getFileList -folder ($workPath+ "/")`;
			
			if(size($fList)==0){
				$err+=("Yeti贴图："+$pgYeti+".imageSearchPath\t设置出错\n");
			}
			if (`progressWindow -query -isCancelled`)
			{
				progressWindow -endProgress;
				error "";
			}
			for($f in $fList){
				if(`match ".tif" $f` != ""){
					string $map=$workPath+"/"+$f;
					$map=zwFullPath($map);
					string $destMap=$destMapsYeti+"/"+$f;
					if(!`filetest -f $destMap`)
					{
						$sysrs = `zwSysFile "copy" $map $destMapsYeti 0`;
					}else{
						continue;	
					}
				}
			}
			
		}else if($buf[size($buf)-2]=="sourceimages" && $buf[size($buf)-1]=="Yeti"){
			$imageYetiPath=`substituteAllString $imageYetiPath "\\" "/"`;
			string $fList[] = `getFileList -folder ($imageYetiPath+ "/")`;
			if(size($fList)==0){
				$err+=("Yeti贴图："+$pgYeti+".imageSearchPath\t设置出错\n");
			}
			if (`progressWindow -query -isCancelled`)
			{
				progressWindow -endProgress;
				error "";
			}
			for($f in $fList){
				if(`match ".tif" $f` != ""){
					string $map=$imageYetiPath+"/"+$f;
					$map=zwFullPath($map);
					string $destMap=$destMapsYeti+"/"+$f;
					if(!`filetest -f $destMap`)
					{
						$sysrs = `zwSysFile "copy" $map $destMapsYeti 0`;
					}else{
						continue;	
					}
				}
			}
			
		}else{
			
			$err+=("Yeti贴图："+$pgYeti+".imageSearchPath\t设置出错\n");
			continue;
			
		}
		setAttr -type "string" ($pgYeti+".imageSearchPath") $destMapsYeti;
	}
	if($max) 
		progressWindow -endProgress;
	return $err;
}



// 只能参考master 文件，不能参考rigging 文件
global proc zwCheckinCheckReferenceRigging()
{
	string $references[] = `file -query -reference`;
	for ($reference in $references)
	{
		$reference = `referenceQuery -withoutCopyNumber -shortName -filename $reference`;
		string $asset_mode = `zwGetMode $reference`;
		if ($asset_mode == "rigging")
		{
			error ("只能参考master 文件，不能参考rigging 文件：" + $reference);
		}
	}
}

//动画上传所用的参考文件检查Texture文件夹的文件与Master文件夹的文件比较
global proc zwCheckinCheckTextureCompareMaster(){
	python("import os");
	string $references[] = `file -query -reference`;
	int $flag=0;
	string $infos;
	for ($reference in $references)
	{
		string $textureFileName;
		
		string $refer = `referenceQuery -withoutCopyNumber -shortName -filename $reference`;
		string $masterPath=dirname($reference);
		string $maseterPaths=$masterPath+"/"+$refer;
		float $masterTime=python("os.path.getmtime('"+$maseterPaths+"')");

		string $buf[];
		clear $buf;
		tokenize $refer "_." $buf;
		if(`match "_h_mc_" $refer`!=""){
			$textureFileName = $buf[0] + "_" + $buf[1] + "_" + $buf[3] + "_tx.mb";
		}else if(`match "_h_dy_" $refer`!=""){
			$textureFileName = $buf[0] + "_" + $buf[1] + "_" + $buf[3] + "_tx.mb";
		}else{
			$textureFileName = $buf[0] + "_" + $buf[1] + "_" + $buf[2] + "_tx.mb";
		}

			
		string $texturePath=`substitute "master" $masterPath "texture"`;
		string $texturePaths=$texturePath+"/"+$textureFileName;
		
		if(`filetest -f $texturePaths`){
			float $textureTime=python("os.path.getmtime('"+$texturePaths+"')");
			if($masterTime<$textureTime){
				$flag=1;
				$infos=$infos+$maseterPaths+"文件更新时间比texture里面的文件更新时间早"+"\n";
			}
		}else{
			string $textureFileNameH = $buf[0] + "_" + $buf[1] + "_" + $buf[2] + "_tx.mb";
			string $textureFilePath=$texturePath+"/"+$textureFileNameH;	
			if(`filetest -f $textureFilePath`){
				float $textureTime=python("os.path.getmtime('"+$textureFilePath+"')");
				if($masterTime<$textureTime){
					$flag=1;
					$infos=$infos+$maseterPaths+"文件更新时间比texture里面的文件更新时间早"+"\n";
				}
			}
		}
		
	}
	if($flag>0){
		confirmDialog -title "master与texture比较更新时间" -message $infos;
		error($infos);	
	}
}


// ly、an只能参考master 文件
global proc zwCheckinCheckAnimReference()
{
	//太阳部落特殊
	string $shortName = `file -q -sn -shortName`;

	string $references[] = `file -query -reference`;
	for ($reference in $references)
	{
		$reference = `referenceQuery -withoutCopyNumber -shortName -filename $reference`;
		string $asset_mode = `zwGetMode $reference`;
		if ($asset_mode != "" && $asset_mode != "master" && $asset_mode != "action"&& $asset_mode != "camera")
		{
			if(`match "^TYBL_" $shortName` != "" && $asset_mode=="texture"){

			}else
				error ("只能参考master/action/camera 文件" + $reference);
		}
	}
}

// 检查时间条
global proc zwCheckinCheckTimeLine()
{
	int $timeLine[];
	if (!catch($timeLine = `idmtProject -timeLine`))
	{
		float $minTime = `playbackOptions -query -minTime`;
		float $maxTime = `playbackOptions -query -maxTime`;
	//	if ($timeLine[0] != $minTime || $timeLine[1] != $maxTime)
		if ($timeLine[1] != $maxTime)
		{
			error ("起始结束帧跟数据库不符，时间滑条：" + $minTime + "-" + $maxTime + "，数据库：" + $timeLine[0] + "-" + $timeLine[1] + ", 请跟PA核实");
		}
	}
}

// 检查cache
global proc zwCheckinCheckCache(string $filename, string $project)
{
	string $cachePath = `zwGetPath "data" $filename`;
	print $cachePath;
	print "\n";

// Geometry Cache
	string $buf[] = `ls -type "cacheFile"`;
	for ($cacheFile in $buf)
	{
		if (`reference -query -isNodeReferenced $cacheFile`)
		{
			continue;
		}

		string $cachePath1 = `getAttr ($cacheFile + ".cachePath")`;
		string $cachePath2 = $cachePath1;
		$cachePath2 = `substituteAllString $cachePath2 "\\" "/"`;
		print $cachePath2;
		if (`gmatch (tolower($cachePath2)) (tolower($cachePath) + "*")`)
		{
			if (tolower($cachePath1) != tolower($cachePath2))
			{
				setAttr -type "string" ($cacheFile + ".cachePath") $cachePath2;
			}
		}
		else
		{
			error ($cacheFile + " 的Base Directory 应该设到" + $cachePath + " 底下");
		}
	}

// shave
	if (`pluginInfo -query -loaded "shaveNode.mll"`)
	{
		$buf = `ls -type "shaveGlobals"`;
		for ($shaveGlobals in $buf)
		{
			if (`reference -query -isNodeReferenced $shaveGlobals`)
			{
				continue;
			}

			string $cachePath1 = `getAttr ($shaveGlobals + ".tmpDir")`;
			string $cachePath2 = $cachePath1;
			$cachePath2 = `substituteAllString $cachePath2 "\\" "/"`;
			if (`gmatch (tolower($cachePath2)) (tolower($cachePath) + "*")`)
			{
				if (tolower($cachePath1) != tolower($cachePath2))
				{
					setAttr -type "string" ($shaveGlobals + ".tmpDir") $cachePath2;
				}
			}
			else
			{
				error ($shaveGlobals + " 的Stat File Directory 应该设到" + $cachePath + " 底下");
			}
		}
	}
}


// 删除渲染层
global proc zwCheckinDelRenderLayer()
{
	string $buf[] = `listConnections "renderLayerManager.renderLayerId"`;
	for ($i=size($buf)-1; $i>0; $i--)
	{
		if (!`reference -query -isNodeReferenced $buf[$i]`)
		{
			string $currentLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
			if ($currentLayer != $buf[0])
			{
				editRenderLayerGlobals -currentRenderLayer $buf[0];
			}
			//2015.6.11
			confirmDialog -message "文件除了默认层，还存在其他的渲染层!" -button "OK";
			error("文件除了默认层，还存在其他的渲染层。。。");
			//evalEcho ("delete \"" + $buf[$i] + "\"");
		}
	}
}

global proc zwCheckinStaticHair()
{
	string $hairs[] = `ls -type hairSystem`;
	for ($item in $hairs)
	{
		int $sm = `getAttr ($item + ".simulationMethod")`;
		if ($sm == 1)
		{
			zwSetAttrInt ($item + ".startFrame") 43;
			zwSetAttrInt ($item + ".collide") 0;
			zwSetAttrInt ($item + ".selfCollide") 0;
			zwSetAttrInt ($item + ".collideGround") 0;
			zwSetAttrInt ($item + ".drawCollideWidth") 0;
		}
	}
}


global proc zwCheckinFurAttrMap(string $assetFolder)
{
	//there are expressions to control furs' texture names, delete them in advance
	string $furs[] = `ls -type "FurDescription"`;
	for ($fur in $furs)
	{
		string $furExps[] = `listConnections -s 0 -d 1 -type expression $fur`;
		for ($item in $furExps)
		{
			if (!`reference -isNodeReferenced $item`)
				delete $item;
		}
	}

	string $furAttrMap = `substitute "/[^/]*$" $assetFolder ""`;
	$furAttrMap = `substitute "/scenes/" $furAttrMap "/renderData/fur/furAttrMap/"`;

	string $furs[] = `ls -type "FurDescription"`;
	for ($fur in $furs)
	{
		string $attrs[] = `listAttr -string "*Map" $fur`;
		for ($attr in $attrs)
		{
			string $maps[] = `listConnections -plugs true -connections true ($fur + "." + $attr)`;
			for ($i=0; $i<size($maps); $i+=2)
			{
				string $source = `getAttr $maps[$i]`;
				$source = `workspace -expandName $source`;
				if (!`filetest -f $source`)
				{
					continue;
				}
				string $dest = $furAttrMap + "/" + `match "[^/\\]+$" $source`;
				string $path = $source;
				print ("\nfur dest:" + $dest);
				print ("\nfur source path:" + $path);

				if (tolower($path) != tolower($dest))
				{
					string $sysrs = `zwSysFile "copy" $source $dest 0`;
					
					setMapFile($maps[$i], $dest);
				}
			}
		}
	}
}

//2015.6.4
//检查arnold代理与非代理文件
global proc  zwCheckArnoldTx(){
	string $infoAi="";
	string $info="";
	string $infoPath="";
	string $infoAss="";
	string $aiset[];
	string $aiNode[] = `ls -type "aiStandIn"`;
	if((size($aiNode)>0) ||(`getAttr "defaultRenderGlobals.currentRenderer"`=="arnold")){
	//非代理文件
	    string $allSets[]=`listSets -allSets`;
	    for($sets in $allSets){
	    	if("OCT_AiNodesSet"==$sets){
	    		delete $sets;
	    	}
	    }
		string $files[] = `ls -type "file"`;
		for($file in $files){
			string $fileTextureName = `getAttr ($file + ".fileTextureName")`;
			$fileTextureName=`workspace -expandName $fileTextureName`;
			string $ext=`fileExtension($fileTextureName)`;
			string $buffer1=`substring $fileTextureName 1 (size($fileTextureName) - size($ext))`;
			if($ext=="JPG" || $ext=="jpg"){
				if(!(`filetest -f ($buffer1+"tx")` || `filetest -f ($buffer1+"TX")`)){
					$info=$info+($fileTextureName+"缺少相应的tx贴图，因为场景中含有arnold代理文件或者当前渲染器为arnold\n");
					//confirmDialog -title "tx贴图" -message ($fileTextureName+"当前层为arnold渲染器,缺少tx贴图");
					//error ($fileTextureName+"当前层为arnold渲染器,缺少tx贴图");	
				} 
			}
		}
		
		//代理文件
		
		string $OCT_ArnoldPath="//octvision.com/CG/Resource/Material_Library/Proxy/Arnold/sourceimages";
		string $Path=(`workspace -expandName "sourceimages"`)+"/arnoldTex";
		//print $Path;
		string $fileDso[];
		int $i=0;
		for($i=0;$i<size($aiNode);$i++){
			string $arnoldDso=`getAttr ($aiNode[$i]+".dso")`;
			if(size($fileDso)!=0){
				int $j=0;
				for($j=0;$j<size($fileDso);$j++){
					if($fileDso[$j]==$arnoldDso){
						continue;
					}
				}
			}
			string $buf[];
			tokenize $arnoldDso "/\\." $buf;
			if(($arnoldDso=="") && (size($buf)<2)){
				error($aiNode[$i]+"代理文件为空!\n");
			}
			if(!`filetest -f ($OCT_ArnoldPath+"/"+$buf[size($buf)-2]+".ass")`){
				$infoAi=$infoAi+($OCT_ArnoldPath+"路径下没有:"+$buf[size($buf)-2]+".ass"+"\n");
				//error($OCT_ArnoldPath+"路径下没有:"+$arnoldDso);
				$aiset[size($aiset)]= $aiNode[$i];
			}
			//网路路径
			string $ArnoldPath=($OCT_ArnoldPath+"/arnoldTex/"+$buf[size($buf)-2]);
			//本机路径
			string $myPath=$Path+"/"+$buf[size($buf)-2];
			
			if((`filetest -d $ArnoldPath`) && (`filetest -d $myPath`)){
				string $MyFile[]=`getFileList -filespec ($ArnoldPath+"/*.jpg")`;
				string $myFiles[]=`getFileList -filespec ($myPath+"/*.jpg")`;
				if(size($MyFile)!=size($myFiles)){
					$infoPath=$infoPath+($ArnoldPath+"与"+$myPath+"目录下的贴图不相同\n");
					//error($ArnoldPath+"与"+$myPath+"目录下的贴图不相同");
				}
			}else if((!`filetest -d $myPath`)&&(`filetest -d $ArnoldPath`)){
				$infoPath=$infoPath+($ArnoldPath+"目录存在"+$myPath+"目录不存在\n");
				//error($ArnoldPath+"目录存在"+$myPath+"目录不存在");
			}else if( (`filetest -d $myPath`)&&(!`filetest -d $ArnoldPath`)){
				//error($ArnoldPath+"目录不存在"+$myPath+"目录存在");
				$infoPath=$infoPath+($ArnoldPath+"目录不存在"+$myPath+"目录存在\n");
			}
			$fileDso[size($fileDso)]=$arnoldDso;
		}
	}
	select -d;
	if(size($aiset)>0){
		for($ai in $aiset){
			select -add $ai;
		}	
		sets -n "OCT_AiNodesSet";
	}
	if(size($infoAi)>0||size($info)>0||size($infoPath)>0){
		error($info+"\n"+$infoAi+"\n"+$infoPath);	
	}
}


//2015.7.15
//检查没有赋材质的物体
global proc checkingNoAnyMat()
{
	string $lsShape[] = `ls -ap -type "mesh" -ni`;
	string $shapeTemp;
	int $enCount	= 0;
	int $isHiden   	= 1;

	string $noSGLayer = "layer_noShader";
	string $noShaderList[]={};
	//listAttr "layer1";
	string $parentObj;
	string $shapeObj;

	for($shapeTemp in $lsShape)
	{

		string $NG[] =`listConnections  -type "shadingEngine" $shapeTemp`;
		if(size($NG)<1)//has connecting to the shader engine
		{
			string $parent[]  = `listRelatives -type "transform" $shapeTemp`;
			//print $parent;
			$noShaderList[$enCount] = $shapeTemp;
			$enCount++;
			if(size($parent)==1)
			{
			    $parentObj=$parentObj+$parent[0]+",";
				//print("this obj has no any Shader==>\t"+$parent[0]+"\n");	
			}
			else
			{
			    $shapeObj=$shapeObj+$shapeTemp+",";
				//print("this mesh shape has no any Shader==>\t"+$shapeTemp+"\n");
			}
		}
	}

	if(size($noShaderList))
	{
		//create noshader display layer
		if(!`objExists $noSGLayer`)
		{
			createDisplayLayer -name $noSGLayer -number 1 -empty;
		}
		//add to noShader display layer
		string $noSGTemp;
		for($noSGTemp in $noShaderList)
		{editDisplayLayerMembers -noRecurse $noSGLayer $noSGTemp;}
		if($isHiden)
		{
			setAttr ($noSGLayer+".visibility") 0;
		}
		string $message="没有赋材质的物体有："+$enCount+"个，分别为："+$parentObj+$shapeObj+"在layer_noShader显示物体";
	    confirmDialog -message $message -button "OK";
	    error($message);
	}
}

//由于有旧的项目，不能改名字的
//2016.3.29
//检查重名的物体(tr,mesh)
global proc check_same_name(){
	int $checkSameName = 0;
	string $allDagNodes[] = `ls  -tr`;
	string $node;
	int $index_MD  = 0;
	for ($node in $allDagNodes)
	{
		if(!`reference -query -isNodeReferenced $node`)
		{
			if (`gmatch $node "*|*"`)
			{
				if( `objExists $node`)
				{
					string $token[];
					tokenize $node "|" $token;
					string $nodeName = $token[(size($token)-1)];
					if(catch(nodeType($nodeName)))
					{
						string $children[] = `listRelatives -f -c $node`;
						string $child;
						for($child in $children)
						{
							string $childToken[] = {};
							tokenize $child "|" $childToken;
							string $childName = $childToken[(size($childToken)-1)];
							if($childName == $nodeName)
							{
								$index_MD++;
							}
						}
						$index_MD++;
					}
				}
			}
		}
	}
	print $index_MD;
	
	int $shapeReNameCout = 0;
	string $meshShape[] = `ls -type "mesh"`;
	string $shapeT;
	for($shapeT in $meshShape)
	{
		if(`reference -query -isNodeReferenced $shapeT`)
		{
			string $token[]={};
			tokenize $shapeT "|" $token;
			string $hapeOnly = $token[size($token)-1];
			if(catch(nodeType($hapeOnly))){
				$shapeReNameCout ++ ;
			}
		}
	}
	print $shapeReNameCout;
	if($index_MD>0){
		//error("存在"+$index_MD+"个同名的transstorm物体");

		string $message = "存在"+$index_MD+"个同名的transform物体,请谨慎确定后上传\n\n点 Continue 继续，点 Cancel 取消Checkin\n\n";
		string $result = `confirmDialog -message $message -button "Continue" -button "Cancel" -defaultButton "Cancel" -cancelButton "Cancel" -dismissString "Cancel"`;
		if ($result == "Cancel")
		{
			error("存在"+$index_MD+"个同名的transstorm物体");
		}
	}
	if($shapeReNameCout>0){
		string $message = "存在"+$shapeReNameCout+"个同名的mesh物体,请谨慎确定后上传\n\n点 Continue 继续，点 Cancel 取消Checkin\n\n";
		string $result = `confirmDialog -message $message -button "Continue" -button "Cancel" -defaultButton "Cancel" -cancelButton "Cancel" -dismissString "Cancel"`;
		if ($result == "Cancel")
		{
			error("存在"+$shapeReNameCout+"个同名的mesh物体");
		}
		//error("存在"+$shapeReNameCout+"个同名的mesh物体");
	}
}


global proc check_Display(){
	string $buf[]=`listConnections "layerManager.displayLayerId"`;
	for($i=size($buf)-1; $i>0; $i--){
		if(!`reference -query -isNodeReferenced $buf[$i]` && $buf[$i]!="defaultLayer"){
			string $result = `confirmDialog -message "文件除了默认层，还存在其他的显示层!,请谨慎确定后上传\n\n点 Continue 继续，点 Cancel 取消Checkin\n" -button "Continue" -button "Cancel" -defaultButton "Cancel" -cancelButton "Cancel" -dismissString "Cancel"`;
			if($result=="Cancel"){
				error("文件除了默认层，还存在其他的显示层。。。");	
			}
		}
	}
}
